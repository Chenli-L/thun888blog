[{"title":"使用Homebox实现家用物品管理","path":"/2024/使用Homebox实现家用物品管理/","content":"前言很久之前，家里面有三把电动螺丝刀，然而前些阵子我想找一把来用都得找半天…… 假期回家，桌面太乱了一直被我妈批斗…… 思来想去这样也不行啊，上网找一下，发现了「Homebox」这个程序，开始干活吧。 安装仓库中也有二进制文件，我这里直接用Docker部署 12345678# Run the image$ docker run -d \\ --name homebox \\ --restart unless-stopped \\ --publish 3100:7745 \\ --env TZ=Europe/Bucharest \\ --volume /path/to/data/folder/:/data \\ ghcr.io/hay-kot/homebox:latest 或用Docker-Compose 1234567891011121314151617181920version: &quot;3.4&quot;services: homebox: image: ghcr.io/hay-kot/homebox:latest# image: ghcr.io/hay-kot/homebox:latest-rootless container_name: homebox restart: always environment: - HBOX_LOG_LEVEL=info - HBOX_LOG_FORMAT=text - HBOX_WEB_MAX_UPLOAD_SIZE=10 volumes: - homebox-data:/data/ ports: - 3100:7745volumes: homebox-data: driver: local 因为还有可能给家里人用，干脆就nginx一条龙服务安排上，搭配家里面ADG上dns重写，家里人直接访问wms.hzchu.top就ok了 部署完成进去后注册一个账号登录即可 HomeBox简单介绍知道它的功能才好干活嘛 相比于「GreaterWMS」，「ModernWMS」等专门用于仓库管理的软件，「Homebox」主打一个家用，因此它的操作也简单不少，在进去后可以看到这样的页面 Create–创建在点开那个抹茶绿的按钮后，可以看到里面包括 Item/Asset,Location,Label 三个选项 Item&#x2F;Asset：新建物品，即存入物品相关信息到程序里，里面包括以下填充项在填写完成后，若只新建单个物品，则会跳转至对应物品详情，可以做详细修改 Location： 新建位置，即存入某个物品存放处（如书桌）的相关信息到程序里，里面包括以下填充项在“父位置”中，可以设置其它已新建的”位置“，表示该位置属于某位置，比如这样 Label：新建类别，即存入某个物品类别（如电子产品）的相关信息到程序里，里面包括以下填充项 Home–主页在加载完成时便是主页了，图片上面有，主要显示了物品总金额，物品、位置、类别总数，近期添加的5个物品，位置、类别列表 Locations–位置（树） 根据创建物品&#x2F;位置时的父位置，程序会构建出一个层级树，简明地展现出它们之间的从属关系 Search–搜索顾名思义 Profile–用户设置直接上图片 Tools–工具包括标签生成器，生成BOM表，导入导出CSV及一些修复工具 我主要用的是标签生成器，可以直接生成二维码贴在物品表面 调好参数右键打印即可 物品详情很详细，但我除了数量和描述都用不上 存在页面切换bug，刷新即可解决 基本逻辑 为了能准确快速地找到对应存放处，我定了一套基本原则： 将几个房间用A&#x2F;B…大写英文字母命名 存放处使用所属房间加数字命名 以房间门为起点，向右统计入库 对应垂直堆叠的存放处，从上往下（优先） 对应物品本体： 对与中等大小物品，使用上文提到的二维码标签， 小物品用一维码标签， 再小就不贴标签，改用荧光笔加胶布或直接跳过 整理时从俯视角度，按入库顺序从左往右，从上到下排列（可选） 对已有唯一标识码（sn码）的物品直接使用 程序内列了四个类别（感觉除了日后忘了物品名称关键词，用来筛选物品外其实没啥用）：大物件，小物件，收纳盒，电子产品 实际实施 因为一开始没发现自带的标签生成器，所以用了「E-Label」来生成一维码，单页85个标签 其中，A&#x2F;B…表示该物品原属房间 标签内容填入物品描述中 https://pan.hzchu.top/s/q8SJ相关文件 还可以把文字缩掉，但考虑到一维码水平方向易被损坏还是留着吧 打印完标签贴到物品上，我这里先用胶布凑合以下，注意要同时覆盖字符及一部分条形码（如图片荧光标准所示）注：图示条形码为第一版 不过还是太麻烦，所以我打算用这种带有不干胶的纸替代，不过因为春节还没到货 总结​\t那么，工期呢？要对小到一颗纽扣电池进行统计本身就不是一件快事，整理一个小时才勉强整理完一张桌子，想全部整理完必然是一个大工程，慢慢来。但全部整理一次确实大有益处，比如我就找到了8年前在某购物广场办的会员卡（前一天才因为没有实体会员卡不给兑积分，这波雪中送炭），因为中途方案改变，要等这个打印纸，就先搁置下来了，才不是因为帕鲁太好玩了","tags":["Homebox","家用"]},{"title":"峰间云海服务器技术分析","path":"/2024/峰间云海服务器技术分析/","content":"前言​\t2023年的暑假，在我百般聊赖之际，网上冲浪时刷到了一个 mc服务器的视频。于是呼，心里萌发了一个想法——建立一个属于自己的服务器。在考虑的各种因素后，我选择了“纯生存”这个主题（之前都是玩命令的，很少沉下心来好好玩玩生存，也算是圆个心愿吧）。然后嘛，路走窄了，因为时机不恰当，稳定性欠佳，玩法单调等致命负面因素，好嘛，它没了（还活着，但在线玩家数量≤3罢了）。毕竟玩家数量跟投入的预算完全不成正比，没啥动力开，让我不禁想起了之前和酷安上一个老哥「Ifkn_271」合作，结果也是这样消失在互联网茫茫大海之中。 ​\t不过话说回来，还是有投入了很多精力在上面的，时至今日，随着「go-cqhttp」项目寿终正寝，加上自己硬盘爆炸带来的数据库丢失，目前只剩下核心的游戏服务端还能用了，今天写一篇文章来追悼怀念一下吧。 内容索引 MCDR插件及部分服务端配置 Dynmap设置MySQL存储及使用独立Web服务器 在线服务平台程序解析及部分代码片段 QQ机器人中自动添加离线用户白名单、聊天信息同步及图片上传 杂项 介绍​\t关于服务器的信息在这里可以看​\t当然，在上面没有涉及到技术部分。总的来说，一共涉及到了「服务端主体及相应插件」，「网页前端、后端」 ，「QQ机器人」， 「Dynmap」这几个部分，大体架构如下 以上，听我慢慢道来 游戏服务端这方面大家各有不同，我这也不是最优选，就一笔带过 外围服务 ​\t由于当时没找到使用于fabric的登录插件，被迫增加了BC和一个独立的登录服务端。在前者我用了「Geyser」和「PixelMOTD」，一个用于转换be版于java版的通信协议，另一个用来处理motd请求，看起来更加高大上。后者用了雪之樱的整合包，并加了BungeeAutoJoinServer模组，在Authme登录事件结束后自动进入服务器。 ​\t虽然臃肿了点，但也有好处，比如防假人压测，motd攻击之类。 Geyser PixelMOTD BungeeAutoJoinServer MCDR 不懂Java，但又得对服务端运行做出干涉，这就得请出MCDReforged了 MCDReforged 清除掉落物 \\mcdr_server\\plugins\\cleandrops.py1234567891011121314151617181920212223242526PLUGIN_METADATA = &#123; &#x27;id&#x27;: &#x27;cleanitem&#x27;, &#x27;version&#x27;: &#x27;1.0.0&#x27;, &#x27;name&#x27;: &#x27;扫地僧&#x27;&#125;from mcdreforged.api.all import *import timedef clear_drops(server: PluginServerInterface): server.execute(&#x27;tellraw @a &#123;&quot;text&quot;:&quot;30秒后清除掉落物&quot;,&quot;color&quot;:&quot;yellow&quot;&#125;&#x27;) time.sleep(30) server.execute(&#x27;kill @e[type=item]&#x27;) server.execute(&#x27;tellraw @a &#123;&quot;text&quot;:&quot;掉落物已清除!&quot;,&quot;color&quot;:&quot;yellow&quot;&#125;&#x27;)def on_info(server: PluginServerInterface, info: Info): if info.content == &#x27;!!cleardrops&#x27;: clear_drops(server)@new_thread(PLUGIN_METADATA[&#x27;id&#x27;])def on_load(server, old): while True: clear_drops(server) time.sleep(86400) 插件运行在新的线程中，可以放心睡。当然，最好还是用「ClearDespawn」 聊天记录统计 \\mcdr_server\\plugins\\talk.py123456789101112131415161718192021222324252627282930313233343536PLUGIN_METADATA = &#123; &#x27;id&#x27;: &#x27;talksave&#x27;, &#x27;version&#x27;: &#x27;1.0.0&#x27;, &#x27;name&#x27;: &#x27;记录玩家聊天记录&#x27;&#125;#配置区域DATABASE = &#123; &#x27;host&#x27;: &#x27;127.0.0.1&#x27;, &#x27;user&#x27;: &#x27;user&#x27;, &#x27;password&#x27;: &#x27;password&#x27;, &#x27;database&#x27;: &#x27;database&#x27;&#125;import mysql.connectorfrom mcdreforged.api.all import *# def on_load(server, old):# server.logger.info(&#x27;Hello world!&#x27;)def on_user_info(server: PluginServerInterface, info: Info): # 获取玩家名和聊天消息内容 player = info.player message = info.content #server.logger.info(f&#x27;&#123;player&#125; 发送了消息：&#123;message&#125;&#x27;) if player is None or message is None: return if message.startswith(&#x27;!!MCDR&#x27;) or message.startswith(&#x27;!!plp&#x27;) or message.startswith(&#x27;!!day&#x27;) or message ==&quot;stop&quot; or message ==&quot;&quot; or message.startswith(&#x27;!!qb&#x27;) or message.startswith(&#x27;tellraw&#x27;) or message.startswith(&#x27;list&#x27;): return # 此部分判断是否为MCDR命令，可根据自己插件不同调整 # 也可与nb联动，同步信息到qq，不过我手抖把代码删了 conn= mysql.connector.connect(**DATABASE) cursor = conn.cursor() sql = &quot;INSERT INTO chat (playername, msg, time) VALUES (%s, %s, NOW())&quot; val = (player, message) cursor.execute(sql, val) conn.commit() cursor.close() 记录聊天记录到数据库，日后可以查询 「银行」 用下界合金为货币，存储到数据库中，本想和商店搭配使用的，没写完就不放了 服务端本体 既然是生存，必然绕不开一些生电类机器，无脑投入carpet的怀抱 Tab玩家列表用styledplayerlist微调了下 \\server\\config\\styledplayerlist\\styles\\default.json1234567891011121314&#123; &quot;style_name&quot;: &quot;Default&quot;, &quot;update_tick_time&quot;: 20, &quot;list_header&quot;: [ &quot;&lt;gr:#ff6c00:#ff6c00&gt;&lt;bold&gt;峰间云海&lt;/bold&gt;&lt;/gr&gt;&quot;, &quot;&lt;color:#555555&gt;&lt;strikethrough&gt; &lt;/strikethrough&gt;[ &lt;/color&gt;&lt;color:#FF5555&gt;%server:online%&lt;color:#6666676&gt;/&lt;/color&gt;%server:max_players%&lt;/color&gt;&lt;color:#555555&gt; ]&lt;strikethrough&gt; &lt;/strikethrough&gt;&lt;/color&gt;&quot; ], &quot;list_footer&quot;: [ &quot;&lt;color:#555555&gt;&lt;strikethrough&gt; &lt;/strikethrough&gt;&lt;/color&gt;&quot;, &quot;&lt;gray&gt;TPS: %server:tps_colored% &lt;dark_gray&gt;|&lt;/dark_gray&gt;&lt;gray&gt; MSPT: %server:mspt_colored% &lt;dark_gray&gt;|&lt;/dark_gray&gt; &lt;gray&gt;RAM: &lt;color:#54fc54&gt;%server:used_ram%/%server:max_ram%MB&lt;/color&gt; &lt;dark_gray&gt;|&lt;/dark_gray&gt; &lt;gray&gt;Ping: &lt;color:#ffba26&gt;%player:ping%ms&lt;/color&gt;&quot;, &quot;&lt;gray&gt;游戏时间：%world:time% &lt;dark_gray&gt;|&lt;/dark_gray&gt; &lt;gray&gt;现实时间：%server:time% &lt;dark_gray&gt;|&lt;/dark_gray&gt; &lt;gray&gt;实体数量：%world:mob_count%&quot; ], &quot;hidden_in_commands&quot;: false&#125; Simple Voice Chat 平时还有几条frp线路备用，而SVC默认使用当前连接的ip+24454进行连接，导致使用frp线路时无法使用，只好在配置里指定连接host \\config\\voicechat\\voicechat-server.properties:2912345# The host name that clients should use to connect to the voice chat# This may also include a port, e.g. &#x27;example.com:24454&#x27;# Don&#x27;t change this value if you don&#x27;t know what you are doingvoice_host=mcvoice.hzchu.top\\:24454# 其它设置无需调整 其它就没什么改动了，添加的插件列表在这里 外围应用Dynmap 如官方简介里说的一样，这是一个Google Maps-like map for your Minecraft server，可以把服务器存档渲染成像谷歌地图般的在线网页供其他人查看 通常情况下，大部分人装好就直接用了，可能再反代一下默认的8123端口，定个自定义路径访问。不过聪明的你从上面的架构图中应该已经发现了不同。没看清？再看一次 flowchart LR A[User] |visit or talk| B[Dynmap Forestage] B C(MySQL) C D[Dynmap Backstage] 为了实现上述访问流程，需要对原有设置做出一定调整 我参考了这篇文章，国内好像还没人写过，我就当个搬运工，绝对不是水字数。 https://bleepcoder.com/cn/dynmap/493645860/tutorial-setting-up-a-standalone-web-server-with-mysqlhttps://bleepcoder.com/cn/dynmap/493645860/tutorial-setting-up-a-standalone-web-server-with-mysql 首先先新建一个数据库，如果能设置允许访问范围的话最好只包括本机和服务端的ip 修改以下配置 更改前\\dynmap\\configuration.txt:281234567891011121314storage: # Filetree storage (standard tree of image files for maps) type: filetree # SQLite db for map storage (uses dbfile as storage location) #type: sqlite #dbfile: dynmap.db # MySQL DB for map storage (at &#x27;hostname&#x27;:&#x27;port&#x27; with flags &quot;flags&quot; in database &#x27;database&#x27; using user &#x27;userid&#x27; password &#x27;password&#x27; and table prefix &#x27;prefix&#x27;) #type: mysql #hostname: localhost #port: 3306 #database: dynmap #userid: dynmap #password: dynmap #prefix: &quot;&quot; 更改后\\dynmap\\configuration.txt:281234567891011121314storage: # Filetree storage (standard tree of image files for maps) #type: filetree &lt;- DONT FORGET TO COMMENT THIS OUT # SQLite db for map storage (uses dbfile as storage location) #type: sqlite #dbfile: dynmap.db # MySQL DB for map storage (at &#x27;hostname&#x27;:&#x27;port&#x27; with flags &quot;flags&quot; in database &#x27;database&#x27; using user &#x27;userid&#x27; password &#x27;password&#x27; and table prefix &#x27;prefix&#x27;) type: mysql hostname: &lt;mysql_ip&gt; port: &lt;mysql_port&gt; database: &lt;mysql_database&gt; userid: &lt;dynmap_mysql_user&gt; password: &lt;dynmap_mysql_password&gt; prefix: &quot;&quot; # Can add prefix for tables if you want 如果使用SQLite取消对应注释即可，路径可写绝对路径，把数据库放到硬盘空间充足的地方 随后，注释掉- class: org.dynmap.InternalClientUpdateComponent所有内容并取消注释- class: org.dynmap.JsonFileClientUpdateComponent所有内容 title 所修改内容 更改前\\dynmap\\configuration.txt:54123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657- class: org.dynmap.InternalClientUpdateComponent sendhealth: true sendposition: true allowwebchat: true webchat-interval: 5 hidewebchatip: true trustclientname: false includehiddenplayers: false # (optional) if true, color codes in player display names are used use-name-colors: false # (optional) if true, player login IDs will be used for web chat when their IPs match use-player-login-ip: true # (optional) if use-player-login-ip is true, setting this to true will cause chat messages not matching a known player IP to be ignored require-player-login-ip: false # (optional) block player login IDs that are banned from chatting block-banned-player-chat: true # Require login for web-to-server chat (requires login-enabled: true) webchat-requires-login: false # If set to true, users must have dynmap.webchat permission in order to chat webchat-permissions: false # Limit length of single chat messages chatlengthlimit: 256# # Optional - make players hidden when they are inside/underground/in shadows (#=light level: 0=full shadow,15=sky)# hideifshadow: 4# # Optional - make player hidden when they are under cover (#=sky light level,0=underground,15=open to sky)# hideifundercover: 14# # (Optional) if true, players that are crouching/sneaking will be hidden hideifsneaking: false # If true, player positions/status is protected (login with ID with dynmap.playermarkers.seeall permission required for info other than self) protected-player-info: false # If true, hide players with invisibility potion effects active hide-if-invisiblity-potion: true # If true, player names are not shown on map, chat, list hidenames: false#- class: org.dynmap.JsonFileClientUpdateComponent# writeinterval: 1# sendhealth: true# sendposition: true# allowwebchat: true# webchat-interval: 5# hidewebchatip: false# includehiddenplayers: false# use-name-colors: false# use-player-login-ip: false# require-player-login-ip: false# block-banned-player-chat: true# hideifshadow: 0# hideifundercover: 0# hideifsneaking: false# # Require login for web-to-server chat (requires login-enabled: true)# webchat-requires-login: false# # If set to true, users must have dynmap.webchat permission in order to chat# webchat-permissions: false# # Limit length of single chat messages# chatlengthlimit: 256# hide-if-invisiblity-potion: true# hidenames: false 更改后\\dynmap\\configuration.txt:54123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# - class: org.dynmap.InternalClientUpdateComponent #sendhealth: true #sendposition: true #allowwebchat: true #webchat-interval: 5 #hidewebchatip: false #trustclientname: false #includehiddenplayers: false # (optional) if true, color codes in player display names are used #use-name-colors: false # (optional) if true, player login IDs will be used for web chat when their IPs match #use-player-login-ip: true # (optional) if use-player-login-ip is true, setting this to true will cause chat messages not matching a known player IP to be ignored #require-player-login-ip: false # (optional) block player login IDs that are banned from chatting #block-banned-player-chat: true # Require login for web-to-server chat (requires login-enabled: true) #webchat-requires-login: false # If set to true, users must have dynmap.webchat permission in order to chat #webchat-permissions: false # Limit length of single chat messages #chatlengthlimit: 256 # # Optional - make players hidden when they are inside/underground/in shadows (#=light level: 0=full shadow,15=sky) # hideifshadow: 4 # # Optional - make player hidden when they are under cover (#=sky light level,0=underground,15=open to sky) # hideifundercover: 14 # # (Optional) if true, players that are crouching/sneaking will be hidden #hideifsneaking: false # If true, player positions/status is protected (login with ID with dynmap.playermarkers.seeall permission required for info other than self) #protected-player-info: false # If true, hide players with invisibility potion effects active #hide-if-invisiblity-potion: true # If true, player names are not shown on map, chat, list #hidenames: false - class: org.dynmap.JsonFileClientUpdateComponent writeinterval: 1 sendhealth: true sendposition: true allowwebchat: true webchat-interval: 5 hidewebchatip: false includehiddenplayers: false use-name-colors: false use-player-login-ip: false require-player-login-ip: false block-banned-player-chat: true hideifshadow: 0 hideifundercover: 0 hideifsneaking: false # # Require login for web-to-server chat (requires login-enabled: true) webchat-requires-login: false # # If set to true, users must have dynmap.webchat permission in order to chat webchat-permissions: false # # Limit length of single chat messages chatlengthlimit: 256 hide-if-invisiblity-potion: true hidenames: false 然后找到disable-webserver并将值从false更改为 true 以禁用内部网页服务器 再修改相应的请求地址（url:） 更改前\\dynmap\\configuration.txt:441123456789101112131415url: # configuration URL #configuration: &quot;up/configuration&quot; # update URL #update: &quot;up/world/&#123;world&#125;/&#123;timestamp&#125;&quot; # sendmessage URL #sendmessage: &quot;up/sendmessage&quot; # login URL #login: &quot;up/login&quot; # register URL #register: &quot;up/register&quot; # tiles base URL #tiles: &quot;tiles/&quot; # markers base URL #markers: &quot;tiles/&quot; MySQL\\dynmap\\configuration.txt:441123456789101112131415url: # configuration URL configuration: &quot;standalone/MySQL_configuration.php&quot; # update URL update: &quot;standalone/MySQL_update.php?world=&#123;world&#125;&amp;ts=&#123;timestamp&#125;&quot; # sendmessage URL sendmessage: &quot;standalone/MySQL_sendmessage.php&quot; # login URL login: &quot;standalone/MySQL_login.php&quot; # register URL register: &quot;standalone/MySQL_register.php&quot; # tiles base URL tiles: &quot;standalone/MySQL_tiles.php?tile=&quot; # markers base URL markers: &quot;standalone/MySQL_markers.php?marker=&quot; SQLite\\dynmap\\configuration.txt:441123456789101112131415url: # configuration URL configuration: &quot;standalone/configuration.php&quot; # update URL update: &quot;standalone/update.php?world=&#123;world&#125;&amp;ts=&#123;timestamp&#125;&quot; # sendmessage URL sendmessage: &quot;standalone/sendmessage.php&quot; # login URL login: &quot;standalone/login.php&quot; # register URL register: &quot;standalone/register.php&quot; # tiles base URL tiles: &quot;standalone/tiles.php?tile=&quot; # markers base URL markers: &quot;standalone/markers.php?marker=&quot; Dynmap还支持MariaDB、PostgreSQL及S3存储。使用MariaDB的话将type: mysql 改为 type: mariadb ，PostgreSQL 改为 type: postgres 并将 url: 中的 MySQL_ 替换为 PostgreSQL_ 。至于S3，太豪气了应该没人用吧，自建当我没说（小声bb 最后修改一下配置文件中前端的地址（会在游戏中显示） \\dynmap\\configuration.txt:478123# Published public URL for Dynmap server (allows users to use &#x27;dynmap url&#x27; command to get public URL usable to access server# If not set, &#x27;dynmap url&#x27; will not return anything. URL should be fully qualified (e.g. https://mc.westeroscraft.com/)publicURL: https://yourdomain.com/ 安装用于MySQL的java驱动包非MySQL存储可跳过 MySQL_JDBC_(Fabric/Forge)https://www.curseforge.com/minecraft/mc-mods/mysql-jdbc/files 下载后放入 mods 文件夹 试运行 ​\t开启服务端，观察日志输出中有无报错，同时检查数据库中是否有数据表生成 成功运行后配置网页前端。先安装PHP-7.4（实测8.0会存在bug无法登录），将...\\dynmap\\web下所有文件复制到网页根目录即可。（模组在启动后会自动完成配置，以配置mysql为存储为例，配置会写入 \\standalone\\config.js和 \\web\\standalone\\MySQL_config.php）如果数据库无法访问可测试手动设置$dbhost为127.0.0.1 打开看看吧~ 哦？一片漆黑，因为这时候还没有执行渲染命令，dynmap还没工作，因此我们可以执行 /dynmap radiusrender world 0 0 10来对主世界出生点周围进行渲染，并查看中有无数据写入到tiles表中 初步测试完成后就可以执行 /dynmap fullrender world 渲染整个世界了。 前端我做了一定修改，有兴趣可以下载看看： https://pan.hzchu.top/s/MWU7?password=uzyj8yhttps://pan.hzchu.top/s/MWU7?password=uzyj8y 注意：该地图会对性能及带宽占用上造成一定影响，请参考网上其他调优资料，根据自身实际情况调整 在线服务 峰间云海 (hzchu.top) 与其叫做官网，倒不如说是一个 综合服务平台 ， 当初想着与其整个花里胡哨的页面，不如整个有用的。虽然事实证明还是花哨的好。 前端 因为当时赶工期， 从头学各种框架来不及，用Py写了个拼凑html的程序，基本能用，后面MRUI也延续了这套，后续如果有空改进下。 基本是开箱即用了 功能在后面混着讲 后端 首页：状态检测使用了mcstatus库，具体操作可以参考mcstatus · PyPI。公告用了Artalk，歪门邪道 聊天记录： main.py1234567891011121314151617181920212223242526272829303132@app.route(&#x27;/user/msg&#x27;, methods=[&#x27;GET&#x27;])def getmsg(): num = request.args.get(&#x27;num&#x27;, default=0, type=int) # 限制访问前200条记录 if num &gt; 160: messages = [] message = &#123; &#x27;id&#x27;: 0, &#x27;playername&#x27;: &quot;Null&quot;, &#x27;msg&#x27;: &quot;200条后不予查看&quot;, &#x27;time&#x27;: &quot;Null&quot; &#125; messages.append(message) return jsonify(messages), 200 conn= mysql.connector.connect(**DATABASE) cursor = conn.cursor() sql = &quot;SELECT id, playername, msg, time FROM chat ORDER BY id DESC LIMIT %s, %s&quot; cursor.execute(sql, (num, 40)) result = cursor.fetchall() cursor.close() messages = [] for row in result: message = &#123; &#x27;id&#x27;: row[0], &#x27;playername&#x27;: row[1], &#x27;msg&#x27;: row[2], &#x27;time&#x27;: row[3].strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;) &#125; messages.append(message) return jsonify(messages), 200 在前端页面中，我是直接用了表格的形式显示，不够好看，原草稿大概是这样，可惜没时间 相册： 这部分与前者差不多，前端网上随便找了个改了改 此部分仅为读取，写入的部分由QQ机器人负责 main.py12345678910111213141516171819202122232425262728293031@app.route(&#x27;/user/photo&#x27;, methods=[&#x27;GET&#x27;])def get_data(): num = request.args.get(&#x27;num&#x27;, default=0, type=int) conn= mysql.connector.connect(**DATABASE) cursor = conn.cursor() try: query = &quot;SELECT id, nickname, author, time, url FROM photo ORDER BY id DESC LIMIT %s, %s&quot; cursor.execute(query, (num, 24)) results = cursor.fetchall() # 将查询结果转换为字典列表 data = [] for row in results: data.append(&#123; &#x27;id&#x27;: row[0], &#x27;nickname&#x27;: row[1], &#x27;author&#x27;: row[2], &#x27;time&#x27;: row[3], &#x27;url&#x27;: row[4] &#125;) return jsonify(data) except Exception as e: return jsonify(&#123;&#x27;error&#x27;: str(e)&#125;) finally: cursor.close() conn.close() 坐标&amp;反馈：缩水了，用Artalk替代了，只能说与我计划中差的有亿点多 排行榜： ​\t这就有点意思了，为了实现这些数据统计，我在游戏中新建了若干的计分板+一些在常加载区块里的命令方块，随后每隔一段时间读取存档里的存储着计分板数据的文件（\\world\\data\\scoreboard.dat），将数值计入数据库。（起初使用Rcon执行命令显示该玩家所有计分板数据并使用正则表达式提取再存入，前期还好，到后来影响太大被迫改进） ​\t游戏里的命令就不说了，需求不一定相同，网上一大把教程 https://www.bilibili.com/read/cv12839156/https://www.bilibili.com/read/cv12839156/ ​\t在实际程序中，为了简化主程序的复杂程度（拉侧边滚动条都拉出火花了），我把新定义的函数放在extra.py里 extra.py1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import mysql.connectorimport python_nbt.nbt as nbtimport jsonimport timedef get_scoreboard(scoreboard_name):# 将字符串转换为 Python 对象 start_time = time.time() file = nbt.read_from_nbt_file(&quot;D:\\MCC\\mcdr_server\\server\\world\\data\\scoreboard.dat&quot;) string_data = str(file) # print(string_data) python_object = ast.literal_eval(string_data) # 将 Python 对象转换为 JSON 字符串 json_data = json.dumps(python_object) data = json.loads(json_data) # print(json_data) # print(data[&quot;value&quot;][&quot;data&quot;][&quot;value&quot;][&quot;PlayerScores&quot;][&quot;value&quot;]) data = data[&quot;value&quot;][&quot;data&quot;][&quot;value&quot;][&quot;PlayerScores&quot;][&quot;value&quot;] for i in data: if i[&quot;Objective&quot;][&quot;value&quot;] == scoreboard_name: name = i[&quot;Name&quot;][&quot;value&quot;] score = i[&quot;Score&quot;][&quot;value&quot;] #print(name,&quot;:&quot;,score) conn= mysql.connector.connect(**DATABASE) cursor = conn.cursor() try: insert_query = &quot;INSERT INTO scoreboard (player, &#123;&#125;) VALUES (%s, %s) ON DUPLICATE KEY UPDATE &#123;&#125; = %s&quot;.format(scoreboard_name, scoreboard_name) data = (name, score, score) cursor.execute(insert_query, data) conn.commit() except Exception as e: print(str(e)) finally: cursor.close() conn.close() # 记录结束时间 end_time = time.time() # 计算执行时间 execution_time = end_time - start_time # 打印执行时间 return(execution_time) ​\t该函数回返回执行时间，不过没用错误处理，虽然一般情况下不会发生错误，不过最好也改进下再用 main.py12345678910111213141516171819202122232425import threadingimport timeimport extradef updatabase(): time_used = extra.get_scoreboard(&quot;pickaxe_total&quot;) time_used = time_used + extra.get_scoreboard(&quot;gametime&quot;) time_used = time_used + extra.get_scoreboard(&quot;Kills&quot;) time_used = time_used + extra.get_scoreboard(&quot;fish&quot;) time_used = time_used + extra.get_scoreboard(&quot;xp&quot;) time_used =&quot; &#123;:.3f&#125;&quot;.format(time_used) #msg_type = &quot;System-AutoTasks&quot; #msg_value = &quot;计分板同步成功，耗时:&quot; + str(time_used) + &quot;秒&quot; #extra.eventssave(msg_type,msg_value) # 用于日志保存，可去掉 def run_timer(): while True: # 每2h执行一次 # 简单粗暴，实际使用请使用schedule库 time.sleep(2* 60 * 60) # 在后台线程中执行需要定时执行的函数 threading.Thread(target=updatabase).start() 通过以下路由返回数据 main.py123456789@app.route(&#x27;/user/scoreboard&#x27;)def get_scoreboard(): cnx = mysql.connector.connect(**DATABASE) cursor = cnx.cursor() query = &quot;SELECT * FROM scoreboard&quot; cursor.execute(query) data = [&#123;&#x27;playername&#x27;: row[0], &#x27;pickaxe_total&#x27;: row[1], &#x27;gametime&#x27;: row[2], &#x27;Kills&#x27;: row[3], &#x27;fish&#x27;: row[4], &#x27;xp&#x27;: row[5]&#125; for row in cursor.fetchall()] cursor.close() return jsonify(data) 前端用了AI帮忙，太折磨人了。 默认折叠list.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202const scoreboardUrl = &#x27;https://***************/user/scoreboard&#x27;;const scoreboardBodyPickaxe = document.getElementById(&#x27;scoreboard-body-pickaxe&#x27;);const scoreboardBodyKills = document.getElementById(&#x27;scoreboard-body-kills&#x27;);const scoreboardBodyFish = document.getElementById(&#x27;scoreboard-body-fish&#x27;);const scoreboardBodyGametime = document.getElementById(&#x27;scoreboard-body-gametime&#x27;);const scoreboardBodyxp = document.getElementById(&#x27;scoreboard-body-xp&#x27;);fetch(scoreboardUrl) .then(response =&gt; response.json()) .then(scoreboard =&gt; &#123; //定义一个比较函数，按照pickaxe_total的大小从高到低排序 function compareByPickaxe(a, b) &#123; return b.pickaxe_total - a.pickaxe_total; &#125; //定义一个比较函数，按照Kills的大小从高到低排序 function compareByKills(a, b) &#123; return b.Kills - a.Kills; &#125; //定义一个比较函数，按照fish的大小从高到低排序 function compareByFish(a, b) &#123; return b.fish - a.fish; &#125; //定义一个比较函数，按照gametime的大小从高到低排序 function compareByGametime(a, b) &#123; return b.gametime - a.gametime; &#125; //定义一个比较函数，按照xp的大小从高到低排序 function compareByxp(a, b) &#123; return b.xp - a.xp; &#125; //定义一个过滤函数，排除掉pickaxe_total为0的玩家 function filterByPickaxe(a) &#123; return a.pickaxe_total &gt; 0; &#125; //定义一个过滤函数，排除掉Kills为null的玩家 function filterByKills(a) &#123; return a.Kills != null; &#125; //定义一个过滤函数，排除掉fish为null的玩家 function filterByFish(a) &#123; return a.fish != null; &#125; //定义一个过滤函数，排除掉gametime为null的玩家 function filterByGametime(a) &#123; return a.gametime != null; &#125; //定义一个过滤函数，排除掉xp为null的玩家 function filterByxp(a) &#123; return a.xp != null; &#125; //对scoreboard数组进行过滤 scoreboard = scoreboard.filter(filterByPickaxe); // 参照最初版重写！！！！ //创建一个副本数组，按照pickaxe_total排序 let scoreboardByPickaxe = [...scoreboard]; scoreboardByPickaxe.sort(compareByPickaxe); console.log(scoreboardByPickaxe) //创建一个副本数组，按照Kills排序，并过滤掉null值 let scoreboardByKills = [...scoreboard]; scoreboardByKills.sort(compareByKills); scoreboardByKills = scoreboardByKills.filter(filterByKills); //创建一个副本数组，按照fish排序，并过滤掉null值 let scoreboardByFish = [...scoreboard]; scoreboardByFish.sort(compareByFish); scoreboardByFish = scoreboardByFish.filter(filterByFish); //创建一个副本数组，按照gametime排序，并过滤掉null值 let scoreboardByGametime = [...scoreboard]; scoreboardByGametime.sort(compareByGametime); scoreboardByGametime = scoreboardByGametime.filter(filterByGametime); //创建一个副本数组，按照xp排序，并过滤掉null值 let scoreboardByXp = [...scoreboard]; scoreboardByXp.sort(compareByxp); scoreboardByXp = scoreboardByXp.filter(filterByxp); //遍历按照pickaxe_total排序的数组，创建表格行和单元格，并添加到对应的表格中 scoreboardByPickaxe.forEach((player, index) =&gt; &#123; const row = document.createElement(&#x27;tr&#x27;); const rank = document.createElement(&#x27;td&#x27;); const playerName = document.createElement(&#x27;td&#x27;); const pickaxeTotal = document.createElement(&#x27;td&#x27;); rank.textContent = index + 1; playerName.textContent = player.playername; pickaxeTotal.textContent = player.pickaxe_total; row.appendChild(rank); row.appendChild(playerName); row.appendChild(pickaxeTotal); scoreboardBodyPickaxe.appendChild(row); &#125;); //遍历按照Kills排序的数组，创建表格行和单元格，并添加到对应的表格中 scoreboardByKills.forEach((player, index) =&gt; &#123; const row = document.createElement(&#x27;tr&#x27;); const rank = document.createElement(&#x27;td&#x27;); const playerName = document.createElement(&#x27;td&#x27;); const kills = document.createElement(&#x27;td&#x27;); rank.textContent = index + 1; playerName.textContent = player.playername; kills.textContent = player.Kills; row.appendChild(rank); row.appendChild(playerName); row.appendChild(kills); scoreboardBodyKills.appendChild(row); &#125;); //遍历按照fish排序的数组，创建表格行和单元格，并添加到对应的表格中 scoreboardByFish.forEach((player, index) =&gt; &#123; const row = document.createElement(&#x27;tr&#x27;); const rank = document.createElement(&#x27;td&#x27;); const playerName = document.createElement(&#x27;td&#x27;); const fish = document.createElement(&#x27;td&#x27;); rank.textContent = index + 1; playerName.textContent = player.playername; fish.textContent = player.fish; row.appendChild(rank); row.appendChild(playerName); row.appendChild(fish); scoreboardBodyFish.appendChild(row); &#125;); //遍历按照gametime排序的数组，创建表格行和单元格，并添加到对应的表格中 scoreboardByGametime.forEach((player, index) =&gt; &#123; const row = document.createElement(&#x27;tr&#x27;); const rank = document.createElement(&#x27;td&#x27;); const playerName = document.createElement(&#x27;td&#x27;); const gametime = document.createElement(&#x27;td&#x27;); rank.textContent = index + 1; playerName.textContent = player.playername; gametime.textContent = Math.floor(player.gametime / 60 / 60) + &quot;h&quot;; row.appendChild(rank); row.appendChild(playerName); row.appendChild(gametime); scoreboardBodyGametime.appendChild(row); &#125;); //遍历按照xp排序的数组，创建表格行和单元格，并添加到对应的表格中 scoreboardByXp.forEach((player, index) =&gt; &#123; const row = document.createElement(&#x27;tr&#x27;); const rank = document.createElement(&#x27;td&#x27;); const playerName = document.createElement(&#x27;td&#x27;); const xp = document.createElement(&#x27;td&#x27;); rank.textContent = index + 1; playerName.textContent = player.playername; xp.textContent = getLevel(player.xp); row.appendChild(rank); row.appendChild(playerName); row.appendChild(xp); scoreboardBodyxp.appendChild(row); &#125;); &#125;);// 定义一个函数，参数为原始经验值function getLevel(exp) &#123; // 定义一个变量，存储经验等级 let level = 0; // 定义一个变量，存储升级所需的经验值 let expToNext = 0; // 使用循环，不断更新经验等级和升级所需的经验值，直到原始经验值不足以升级为止 while (true) &#123; // 根据公式，计算升级所需的经验值 if (level &lt;= 15) &#123; expToNext = 2 * level + 7; &#125; else if (level &lt;= 30) &#123; expToNext = 5 * level - 38; &#125; else &#123; expToNext = 9 * level - 158; &#125; // 判断原始经验值是否足够升级 if (exp &gt;= expToNext) &#123; // 如果足够，减去升级所需的经验值，增加经验等级 exp -= expToNext; level++; &#125; else &#123; // 如果不足，跳出循环 break; &#125; &#125; // 返回经验等级 return level;&#125; 管理： 如果内建账号密码登录，要增加一些工作量，所以我借鉴了一下之前某个AIGC平台的做法，向qq机器人发信息以获取有效期一周的token用于登录，这样安全性大大提高，而且写起来也不用顾虑太多。在初次打开时网页会发送鉴权请求判断是否有效，后续请求也都带上这个token。以下是部分代码片段 封禁玩家12345678910111213141516@app.route(&#x27;/admin/banplayer&#x27;, methods=[&#x27;POST&#x27;])def banplayer(): playername = request.json.get(&#x27;playername&#x27;) reason = request.json.get(&#x27;reason&#x27;)\t... if reason == &quot;&quot;: reason = &quot;未记录原因的封禁，请联系管理员&quot; command = &#x27;kick &#x27; + playername + &#x27; &#x27; + reason response = extra.sendcommand(command) command = &#x27;ban &#x27; + playername + &#x27; &#x27; + reason response = extra.sendcommand(command) conn = mysql.connector.connect(**DATABASE)\t... return jsonify(&#123;&#x27;code&#x27;:0,&#x27;response&#x27;: response&#125;), 200 extra.py1234567891011import mcrcon# 主机 密码 端口client = mcrcon.MCRcon(&#x27;127.0.0.1&#x27;, &#x27;*-*-*-*&#x27;, 2****5)client.connect()def sendcommand(command): if not command: return &#123;&#x27;error&#x27;: &#x27;No command provided&#x27;&#125; response = client.command(command) return response 解除封禁123456789@app.route(&#x27;/admin/debanplayer&#x27;, methods=[&#x27;POST&#x27;])def debanplayer(): playername = request.json.get(&#x27;playername&#x27;)\t... command = &#x27;pardon &#x27; + playername response = extra.sendcommand(command) conn = mysql.connector.connect(**DATABASE)\t... return jsonify(&#123;&#x27;code&#x27;:0,&#x27;response&#x27;: response&#125;), 200 获取用户信息12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import ipdb@app.route(&#x27;/admin/getaccount&#x27;, methods=[&#x27;POST&#x27;])def getaccount(): accountinfo = request.json.get(&#x27;accountinfo&#x27;) mode = int(request.json.get(&#x27;mode&#x27;))\t... conn = mysql.connector.connect(**DATABASE) c = conn.cursor() if mode == 1: c.execute(&quot;SELECT * FROM `qq_user` where qq_id = %s&quot;, (accountinfo,)) elif mode == 2: c.execute(&quot;SELECT * FROM `qq_user` where user_name = %s&quot;, (accountinfo,)) elif mode == 3: c.execute(&quot;SELECT * FROM `qq_user` where be_name = %s&quot;, (accountinfo,)) else: c.execute(&quot;SELECT * FROM `qq_user` where qq_id = %s&quot;, (accountinfo,)) acc_result = c.fetchall() if acc_result: if acc_result[0][5] is None: be_name = &quot;!未绑定!&quot; else: be_name = acc_result[0][5] playername = acc_result[0][1] # 用的MySQL数据库，Authme和该服务共用一个数据库，因此直接调用其获取IP c.execute(&quot;SELECT * FROM `authme` where realname = %s or username = %s&quot;, (playername,playername,)) ip_result = c.fetchall() conn.close() #嵌套有点多，整活部分可以改掉 if ip_result: ip = ip_result[0][4] if ipaddress.ip_address(ip).is_private: ip = &quot;内网地址&quot; country=&quot;南极洲&quot; city=&quot;中山站&quot; else: ipinfo=db.find_map(ip, &quot;CN&quot;) country=ipinfo[&quot;country_name&quot;] city= ipinfo[&quot;region_name&quot;]+&quot;，&quot;+ipinfo[&quot;city_name&quot;] else: ip = &quot;!未记录在数据库!&quot; country=&quot;北极点&quot; city=&quot;鹦鹉螺号&quot; return jsonify(&#123;&#x27;code&#x27;:0,&#x27;qq&#x27;: acc_result[0][0],&#x27;user_name&#x27;: playername,&#x27;bind_time&#x27;: acc_result[0][2],&#x27;group&#x27;: acc_result[0][3],&#x27;status&#x27;: acc_result[0][4],&#x27;be_name&#x27;: be_name,&#x27;ip&#x27;: ip,&#x27;country&#x27;:country,&#x27;city&#x27;:city&#125;), 200 else: conn.close() return jsonify(&#123;&#x27;code&#x27;:1000,&#x27;msg&#x27;: &#x27;没有相应玩家消息&#x27;&#125;), 200 QQ-BOT 在整个规划中，它承担了相当重要的责任，譬如自动添加白名单（绑定） 绑定：一开始我使用了一个极为简单的绑定方式：通过Rcon连接到服务器执行 whitelist add playername，按理来说这没问题，但是后面来的玩家基本都在抱怨进不去服务器。错误截图都一样，不在白名单内。最后发现uuid不一致，有些人的离线用户名与某些正版用户名重复了，导致服务端直接沿用正版用户的uuid，过不去后续校验。所以我这里就直接计算离线用户的uuid写入到whitelist.json内 mchelper\\__init__.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152@bind.handle()async def handle_first_receive(matcher: Matcher, args: Message = CommandArg()): plain_text = args.extract_plain_text() # 首次发送命令时跟随的参数，例：/绑定 username，则args为username if plain_text: matcher.set_arg(&quot;username&quot;, args) # 如果用户发送了参数则直接赋值@bind.got(&quot;username&quot;, prompt=&quot;请输入你的用户名&quot;)async def handle_username(event: GroupMessageEvent, username: Message = Arg(), username_str: str = ArgPlainText(&quot;username&quot;)): username = str(username) user_id = event.user_id pattern = r&#x27;^[a-zA-Z0-9_]+$&#x27; if re.match(pattern, username): pass else: extra.settimeout() await bind.finish(f&quot;用户名只可以包括英文字母，数字，下划线&quot;)\t... binduser(username)\t... await bind.finish(f&quot;&#123;username&#125; 绑定成功（若仍无法进入服务器，可尝试发送“正常流程绑定”）&quot;) # 即用whitelist add def binduser(playername): offline_uuid = str(extra.touuid(playername)) #offline_uuid = offline_uuid_raw[:8] + &quot;-&quot; + offline_uuid_raw[8:12] + &quot;-&quot; + offline_uuid_raw[12:16] + &quot;-&quot; + offline_uuid_raw[16:20] + &quot;-&quot; + offline_uuid_raw[20:] #读取 ***\\whitelist.json,找到playername对应的uuid，用offline_uuid替换 whitelist_file_path = r&quot;Z:\\server\\whitelist.json&quot; with open(whitelist_file_path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f: data = json.load(f) # 先尝试是否能找到对应玩家名称的条目，并替换uuid字段，如果没有，则新增 found = False # 定义一个变量，用来标记是否找到了对应的玩家条目 for player in data: if player[&quot;name&quot;] == playername: player[&quot;uuid&quot;] = offline_uuid # 替换uuid字段 found = True # 将变量设为True，表示找到了对应的玩家条目 break # 跳出循环，不再继续查找 if not found: # 如果变量为False，表示没有找到对应的玩家条目 data.append(&#123;&quot;name&quot;: playername, &quot;uuid&quot;: offline_uuid&#125;) # 在data列表中添加一个新的字典，包含玩家的名字和uuid # 将修改后的内容写回whitelist.json文件 with open(whitelist_file_path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f: json.dump(data, f) # 调用外部命令来重载白名单 client.connect() command = &quot;whitelist reload&quot; response = client.command(command) client.disconnect() mchelper\\extra.py12345678910111213141516171819import hashlibimport uuid#该函数用于计算离线用户的uuiddef touuid(name): name = &quot;OfflinePlayer:&quot; + name md5 = hashlib.md5() md5.update(name.encode(&#x27;utf-8&#x27;)) md5_bytes = md5.digest() md5_bytes = bytearray(md5_bytes) md5_bytes[6] &amp;= 0x0f md5_bytes[6] |= 0x30 md5_bytes[8] &amp;= 0x3f md5_bytes[8] |= 0x80 return uuid.UUID(bytes=bytes(md5_bytes)) 解绑：其实差不了多少 mchelper\\__init__.py123456789101112131415161718def debinduser(playername): offline_uuid = str(extra.touuid(playername)) whitelist_file_path = r&quot;Z:\\server\\whitelist.json&quot; with open(whitelist_file_path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f: data = json.load(f) for player in data: if player[&quot;name&quot;] == playername: data.remove(player) # 移除该条目 # 将修改后的内容写回whitelist.json文件 with open(whitelist_file_path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f: json.dump(data, f) # 调用外部命令来重载白名单 client.connect() command = &quot;whitelist reload&quot; response = client.command(command) client.disconnect() 图片上传： flowchart LR A[User] -->|\"@BOT+图片\"| B[\"nb2-mchelper\"] B |\"upgit\"| C(\"pic.hzchu.top(lysk pro)\") B --> D[\"MySQL\"] mchelper\\__init__.py1234567891011121314151617181920212223242526272829303132333435363738394041424344upphoto = on_message(rule=to_me(), priority=5, block=True)@upphoto.handle()async def handle_upphoto(bot: Bot, event: GroupMessageEvent, state: T_State): user_id = event.user_id message = str(event.get_message()) conn = mysql.connector.connect(**DATABASE) # print(message) if message: if matches: pattern = r&quot;\\[CQ:image,file=\\w+\\.image,subType=\\d+,url=(https?://\\S+?)]&quot; matches = re.findall(pattern, message) current_time = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime(time.time())) # print(matches) for match in matches: # print(match) file_name = str(user_id) + str(time.time() * 1000)+&quot;.jpg&quot; save_path = &#x27;./tmp/&#x27; + file_name response = requests.get(match, stream=True) if response.status_code == 200: with open(save_path, &#x27;wb&#x27;) as file: for chunk in response.iter_content(1024): file.write(chunk) path = &quot;Z:\\ b2\\\\mc\\\\tmp\\\\&quot; + file_name response = extra.upload_image(path) if response.startswith(&quot;https://&quot;): url = response c = conn.cursor() c.execute(&quot;INSERT INTO photo VALUES (%s,%s,%s,%s,%s)&quot;, (None, str(event.sender.card),user_id, current_time, url)) conn.commit() else: conn.disconnect() await upphoto.finish(&quot;上传失败（调用上传工具错误）&quot;) os.remove(path) else: conn.disconnect() await upphoto.finish(&quot;上传失败(请求图片错误)&quot;) conn.disconnect() await upphoto.finish(&quot;上传成功&quot;) else: conn.disconnect() return # 没有图片链接，不执行回复操作 聊天记录同步： send\\__init__.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778from nonebot import on_message, loggerfrom nonebot.adapters.onebot.v11 import GroupMessageEvent, Bot,MessageSegmentfrom nonebot.rule import startswithfrom nonebot import get_driverimport mcrconimport threadingimport timeimport remsg_matcher = on_message(priority=10, block=False)client = mcrcon.MCRcon(&#x27;127.0.0.1&#x27;, &#x27;******&#x27;, 2***5)def sendcommand(command): response = client.command(command) return response@msg_matcher.handle()async def _(bot: Bot, event: GroupMessageEvent): if event.group_id == 790118052: nick = str(event.sender.card) if nick == &quot;&quot;: nick = str(event.sender.nickname) msg = nick+&quot;:&quot;+replace(event.message) qqqq = &quot;[Q群]&quot; msg =f&#x27;[&#123;&#123;&quot;text&quot;:&quot;&#123;qqqq&#125;&quot;,&quot;color&quot;:&quot;gold&quot;&#125;&#125;,&#123;&#123;&quot;text&quot;:&quot;&#123;msg&#125;&quot;,&quot;color&quot;:&quot;white&quot;&#125;&#125;]&#x27; command=f&quot;tellraw @a [&#123;msg&#125;]&quot; # print(command) sendcommand(command)# 定义一个函数，接受一个文本参数，返回替换后的文本def replace(text): text = str(text) image_pattern = r&quot;\\[CQ:image,file=.+?image,subType=0,url=.+?\\]&quot; at_pattern = r&quot;\\[CQ:at,qq=\\d+\\]&quot; picface_pattern = r&quot;\\[CQ:image,file=.+?image,subType=1,url=.+?\\]&quot; face_pattern = r&quot;\\[CQ:face,id=.+?]&quot; record_pattern = r&quot;\\[CQ:record,file=.+?amr,url=.+?\\]&quot; redbag_pattern = r&quot;\\[CQ:redbag,title=.+?\\]&quot; shit_pattern = r&quot;请使用最新版手机QQ体验新功能&quot; result = re.sub(image_pattern, &quot;[图片]&quot;, text) result = re.sub(picface_pattern, &quot;[图片表情]&quot;, result) result = re.sub(face_pattern, &quot;[表情]&quot;, result) result = re.sub(at_pattern, &quot;@&quot;, result) result = re.sub(record_pattern, &quot;[语音]&quot;, result) result = re.sub(redbag_pattern, &quot;[红包]&quot;, result) result = re.sub(shit_pattern, &quot;不支持的信息类型&quot;, result) result = result.replace(&quot;&lt;&quot;, &quot;《&quot;).replace(&quot;&gt;&quot;, &quot;》&quot;) # 返回替换后的结果 return resultdef connectagain(): client.connect()def run_timer(): while True: # 每5分钟执行一次 time.sleep(5 * 60) # 在后台线程中执行需要定时执行的函数 threading.Thread(target=connectagain).start()# 避免重复执行使得后台刷屏connectagain()timer_thread = threading.Thread(target=run_timer)timer_thread.daemon = Truetimer_thread.start() 杂项 备份相关： 由于之前存档炸过一次，相关的备份措施也随之建立起来。可分为主动式和被动式。主动式嘛，好说，不就是手动关掉自动保存然后压缩到一个独立硬盘嘛 被动的话就是用Syncthing进行单向同步，目前，我设置了2台设备用于备份 flowchart LR A[Game Server] -->|\"有更改时同步\"| B(\"B Server\") A[Game Server] -->|\"2h全部同步\"| C C(\"A Server\")-->|\"有更改时同步\"|B 也用过git，但同步太耗性能了，遂放弃 结语​\t逝去的事物，只是换了个形式陪伴在你我身边。","tags":["python","MC"]},{"title":"Mirouterui简要部署指南","path":"/2023/howtorunmrui/","content":"前言该项目是由于我厌倦了管理后台和APP的卡顿而写的，因此项目开发之初就不考虑集成在管理后台，做成一个独立的页面，并实现跨平台。 并且，调用的都是小米路由器独有的api接口，与Openwrt完全不兼容。 用于测试的只有r1d和r4a，对于别的型号的支持，还得看大家的反馈才能完善。 感谢YSC6666，黑衣剑士z，Super丶聪(@bilibili)的帮助 代码开源在 https://github.com/Mirouterui/ ，欢迎 star&amp;提prヾ(≧▽≦*)o 碍于实际需求，拿一台瘦客户机装了个ikuai，这个项目先鸽了 面板展示首页路由器详情设备列表设备详情温度显示（仅支持部分设备）历史数据统计 部署 小米路由器是基于Openwrt的，故下文Openwrt仅指小米路由器附：​ WindowsOpenwrtDocker从Release下载对应的架构的发行版 64位：amd64，32位：i386，arm: arm 可访问镜像站以获取更快的速度 然后运行，程序会自动下载配置文件，在其中填上密码即可。配置文件中其它条目在下面 再次运行，等待下载页面静态文件，若能支持获取token即为成功 部分设备出现无法运行&amp;无法找到配置文件可使用“不使用upx压缩”版本（即带_noupx后缀的版本） 从Release复制对应的架构的发行版的下载链接 使用uname –a查看架构（如果为armv7l，考虑使用armv5版本） 运行： curl –L yourlink –o mirouterui chmod 777 mirouterui .&#x2F;mirouterui 程序会自动下载配置文件，在其中填上密码即可。配置文件中其它条目在下面。. 再次运行，等待下载页面静态文件 若能支持获取token即为成功 常见问题： 无法下载配置文件，路由器太老了 使用 curl https://mruiapi.hzchu.top/downloadconfig -o config.json 手动下载 无法下载配置文件 从Mirouterui&#x2F;static: 前端静态文件 (github.com)下载，并解压到static目录 命令： docker run -d -p 6789:6789 -v $(pwd):&#x2F;app&#x2F;data –name mirouter-ui –restart&#x3D;always thun888&#x2F;mirouter-ui 新建一个文件夹，并在该文件夹里运行上述命令，程序会在该文件夹里生成配置文件，修改即可 修改完成后重启该容器（或等待自动重启） 最后命令窗口中会显示网页的访问端口，使用设备的ip地址+端口号(6789)访问面板 常见问题 密码正确，但无法登陆：尝试获取自己路由器的key，可参考视频或使用自动工具 CPU占用为0： 受api限制，新版路由器无法正常获取，可尝试将其部署在路由器上 温度显示： 目前API模式只支持R1D,R2D,命令模式只支持红米AX6和R1D 设备显示不全： 当设备过多时，首页只会显示当前有网络活动的设备，请进入设备详细列表查看 在线前端无法使用： 受浏览器安全限制，需关闭访问私有ip限制 配置项 配置名 默认值 解释 dev [] 路由器信息，参阅dev项 history [] 历史记录相关功能，参阅history项 tiny false 启用后，不再下载静态文件，需搭配在线前端使用 netdata_routerid 0 调用netdata api时返回的路由器（对应dev项中第n个） flushTokenTime 1800 刷新token时间间隔(s) port 6789 网页页面端口号 debug true debug模式，建议在测试正常后关闭 dev项： 配置名 默认值 解释 password 路由器管理后台密码 key a2ffa5c9be07488bbb04a3a47d3c5f6a 路由器管理后台key ip 192.168.31.1 路由器IP routerunit false 启用后，程序通过gopsutil库获取CPU占用 history项： 配置名 默认值 解释 enable false 是否启用历史数据统计 sampletime 300 采样时间间隔(s) maxsaved 8640 最多记录条数 命令行参数： 参数 解释 –config 配置文件路径，默认为“.&#x2F;config.json” –basedirectory 基础目录路径，在里面存放静态文件 –databasepath 数据库路径，默认为“.&#x2F;database.db” 后台运行注册为系统服务 1sudo vim /etc/systemd/system/mrui.service 12345678910[Unit]Description=mruiAfter=network.target network-online.targetRequires=network-online.target[Service]ExecStart=/pathto/mrui[Install]WantedBy=multi-user.target 设置开机自启 1sudo systemctl enable mrui 管理 1234查看状态：systemctl status mrui启动：sudo systemctl start mrui停止：sudo systemctl stop mrui重启：sudo systemctl restart mrui windows守护进程工具–nssm详解 - 博客园 (cnblogs.com) Stars~ TODO 历史数据统计 深色模式 多路由支持 快捷更新 设备小工具 netdata，api形式兼容 MRUI开发规划 主要功能已完成开发,接下来随缘更新😶‍🌫️ 更新日志","tags":["Mirouterui"]},{"title":"基于Onedrive的高可用性图床","path":"/2023/photoononedrive/","content":"前言一直以来，我都在尝试各种图片存储方案，一开始便是经典的Github+jsd，但考虑到违反了tos后面就用了cf+b2，但速度不尽人意。后来用了vercel反代gh和一些杂七杂八的，但换汤不换药嘛，还是不靠谱。 在差不多一年前，我在捣鼓网心云时想到个主意：何不用家里电脑作为图片存储，通过非标准端口访问绕过备案要求。于是在随记上提出个简易pcdn的想法 不过像我这种小站没必要搞那么重量级了，于是改进了下 思路 首先，本质上是个缓存服务，存储在OneDrive（下文简称od），通过各个节点分发图片，就是给od套了个CDN嘛。 因为我这网站也没多少流量，并发不高，我更倾向葫芦娃救爷爷式的单节点当主力，挂了再切换到其它节点的方式。 最后就是轻量，总不能把od下放到每个节点吧。 故： 设立一个“主服务器”，用来将od的内容分发到节点，可以用无服务器函数，也可以直接和”图床服务器“合并。同时因为服务器间同步有延时，在”图床服务器“要留个口直接下载刚刚上传的图片。 设立一个”副服务器“，负责检测节点状况和跳转到对应节点。 ”图床服务器“：使用lsky-pro作为图床程序，将od使用rclone挂载到对应的存储策略文件夹上。 节点：获取访问的链接，检查本地有无缓存，有就返回，没有就下载再返回。考虑到要用php的话配置起来麻烦，直接用py了。 准备 服务器 &gt;&#x3D;1台，最好是访问速度快的 一个微软账户（我这里用的是E5订阅账户） 有公网IP的家庭宽带（可选） 在od中新建/share/mount目录，若自行更改请注意将下文涉及的地方一起修改 推荐使用Linux，如果使用Windows下文操作将有所不同，需自行更改 安装（图床服务器）首先完成“图床服务器”的搭建。 前置libfuse安装meson ninja 1pip3 install meson ninja 安装pip的三种方法 从 https://github.com/libfuse/libfuse/releases 下载libfuse的源码 解压，创建一个（临时）构建目录，然后 运行meson 123tar xzf fuse-3.15.1.tar.gz; cd fuse-3.15.1/mkdir build; cd buildmeson setup .. 3.15.1 替换为对应的releases版本 运行ninja进行安装 1sudo ninja install rclone安装： 1curl https://rclone.org/install.sh | sudo bash 同时在本地也要安装，用来获取token 在本地运行rclone config进行配置 把token复制出来备用（token包括两端的{}） 在服务端进行同样的操作，但在Edit advanced config中填y 然后一路回车，在Already have a token - refresh?填n 然后按要求填写 会自动获取drive_id,drive_type，不要回车太快按过了 挂载试试吧 12mkdir mountrclone mount one:/share/mount/ ./mount/ 不出意外你能看见这个报错 打开报错涉及的文件，取消注释，保存 再试下，如果没报错就可以了 新建的mount文件夹在下文没有作用，建议删除~ 使用fusermount -qzu mount 卸载 LNMP不用多说 配置图床本体我这里用的是Lsky Pro作为图床程序，其他大同小异 按照文档安装好后，新建一个本地存储策略，访问地址指向“副服务器”，并在后面加上/mount，存储路径根据自己的网站路径来，如/www/wwwroot/pic.hzchu.top/就填/www/wwwroot/pic.hzchu.top/storage/app/mount/ 记得更改&amp;新建相应目录 Rclonerclone需要持久化运行，我这里建议的是Supervisor或系统自带的systemd，windows使用nssm 1rclone mount one:/share/mount/ /www/wwwroot/pic.hzchu.top/storage/app/mount/ --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 --vfs-cache-mode full --attr-timeout 15m --vfs-cache-max-age 240h --vfs-cache-max-size 1G --buffer-size 100M supervisorsystemd以宝塔面板为例 打开软件商店，搜索并安装进程守护管理器： 点击添加守护进程，如图所示 运行： 1sudo vim /etc/systemd/system/rclone-one.service ​\t写入： 1234567891011121314[Unit]Description=rclone-oneAfter=network.target remote-fs.target nss-lookup.target[Service]User=rootExecStart=rclone mount one:/share/mount/ /www/wwwroot/pic.hzchu.top/storage/app/mount/ --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 --vfs-cache-mode full --attr-timeout 15m --vfs-cache-max-age 240h --vfs-cache-max-size 1G --buffer-size 100MExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPIDRestart=on-abnormalRestartSec=5s[Install]WantedBy=multi-user.target 安装（主服务器）可以用无服务器函数，这里使用onedrive-vercel-index作为OneDrive的直链解析，这里是它的文档 将baseDirectory设为/share 由于原作者的应用程序已过期，需要自行配置，参考高级 - OneDrive Vercel Index (swo.moe)进行调整 由于vercel.app在国内污染严重，请绑定你的域名 中途 开香槟 测试 在图床中上传一张图片，查看是否上传成功，若出现错误，则检查图床服务器 等待5分钟后访问https://yourdomain.top/zh-CN/mount/，查看是否出现pic文件夹，并根据年/月/日进入子文件夹查看能否访问图片 安装（副服务器）需要安装redis，故不推荐使用虚拟主机，但非要用可以使用Vercel的Durable Redis 注： jumpurl为该节点的对外访问地址 apiurl 为“副服务器”的对外访问地址 backupurl 为“图床服务器“的对外访问地址 mainurl 为“主服务器“的对外访问地址 PHP版本Python版本解析 需要修改redis连接地址，$user_token和$mainurl Code: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106&lt;?php// 连接 Redis 服务器$redis = new Redis();$redis-&gt;connect(&#x27;127.0.0.1&#x27;, 6379);$redis-&gt;select(2);//token$user_token = &quot;yourtoken&quot;;//主服务器url$mainurl = &quot;https://yourdomain.top/api/raw/?path=/&quot;;// 定义限制器类class Limiter &#123; private $limits; private $key_func; private $requests; public function __construct($key_func, $default_limits) &#123; $this-&gt;limits = $default_limits; $this-&gt;key_func = $key_func; $this-&gt;requests = array(); &#125; public function limit($route, $limit) &#123; if (!isset($this-&gt;requests[$route])) &#123; $this-&gt;requests[$route] = array(); &#125; $key = call_user_func($this-&gt;key_func); if (!isset($this-&gt;requests[$route][$key])) &#123; $this-&gt;requests[$route][$key] = array(); &#125; array_push($this-&gt;requests[$route][$key], time()); while (count($this-&gt;requests[$route][$key]) &gt; 0 &amp;&amp; time() - $this-&gt;requests[$route][$key][0] &gt; 1) &#123; array_shift($this-&gt;requests[$route][$key]); &#125; if (count($this-&gt;requests[$route][$key]) &gt; $limit) &#123; http_response_code(429); die(&#x27;Too Many Requests&#x27;); &#125; &#125;&#125;// 定义获取客户端 IP 地址的函数function get_remote_address() &#123; return $_SERVER[&#x27;REMOTE_ADDR&#x27;];&#125;// 初始化限制器$limiter = new Limiter(&#x27;get_remote_address&#x27;, array(&#x27;40 per second&#x27;));// 定义 update 路由if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;POST&#x27; &amp;&amp; $_SERVER[&#x27;REQUEST_URI&#x27;] === &#x27;/_api/update&#x27;) &#123; // 检查请求速率 $limiter-&gt;limit(&#x27;/_api/update&#x27;, 5); // 获取请求参数 $json = json_decode(file_get_contents(&#x27;php://input&#x27;), true); $token = isset($json[&#x27;token&#x27;]) ? $json[&#x27;token&#x27;] : null; $server_id = isset($json[&#x27;server_id&#x27;]) ? $json[&#x27;server_id&#x27;] : null; $url = isset($json[&#x27;url&#x27;]) ? $json[&#x27;url&#x27;] : null; // 检查参数完整性 if (!$token || !$server_id || !$url) &#123; http_response_code(400); die(json_encode(array(&#x27;code&#x27; =&gt; 1002, &#x27;msg&#x27; =&gt; &#x27;Missing required parameters.&#x27;))); &#125; // 检查 token 是否有效 if ($token !== $user_token) &#123; http_response_code(400); die(json_encode(array(&#x27;code&#x27; =&gt; 1002, &#x27;msg&#x27; =&gt; &#x27;Invalid token.&#x27;))); &#125; // 更新服务器信息 $redis-&gt;setEx(&quot;jump_$server_id&quot;, 1200, $url); // 返回成功消息 header(&#x27;Content-Type: application/json&#x27;); echo json_encode(array(&#x27;code&#x27; =&gt; 0, &#x27;msg&#x27; =&gt; &#x27;ok&#x27;));&#125;// 定义 jump 路由else if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;GET&#x27; &amp;&amp; preg_match(&#x27;/^\\/(.+)$/&#x27;, $_SERVER[&#x27;REQUEST_URI&#x27;], $matches)) &#123; // 检查请求速率 $limiter-&gt;limit(&#x27;/&lt;path:url&gt;&#x27;, 40); // 获取客户端请求的 URL $url = $matches[1]; // 从 Redis 中读取数据 for ($i = 1; $i &lt;= 5; ++$i) &#123; if ($redis-&gt;exists(&quot;jump_$i&quot;)) &#123; $orig_url = $redis-&gt;get(&quot;jump_$i&quot;); break; &#125; &#125; // 如果未找到数据，则使用默认的原始 URL if (!isset($orig_url)) &#123; $orig_url = $mainurl; &#125; // 拼接 URL 并重定向客户端 header(&#x27;Location: &#x27; . ($orig_url . urlencode($url)));&#125; 伪静态配置: 123location / &#123; try_files $uri $uri/ /index.php?$args;&#125;Code: 需要修改redis连接地址，user_token和mainurl 安装依赖： 1pip3 install flask flask_limiter hypercorn flask_cors 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566from flask import Flask, jsonify, request, redirectfrom flask_limiter import Limiterfrom flask_limiter.util import get_remote_addressimport redisfrom hypercorn.asyncio import servefrom hypercorn.config import Configimport asynciolimiter = Limiter( key_func=get_remote_address, default_limits=[&quot;20 per second&quot;], storage_uri=&#x27;redis://localhost:6379&#x27;)config = Config()#配置区redis_client = redis.Redis(host=&#x27;localhost&#x27;, port=6379, db=2)mainurl = &quot;https://yourdomain.top/api/raw/?path=/&quot;user_token = &quot;user_token&quot; #双端保持一致config.bind = [&quot;0.0.0.0:56789&quot;] #可自行修改端口号config.protocol = &quot;h2&quot; # 启用HTTP2#注意需要替换为你的证书路径config.certfile = &quot;./pem.pem&quot;config.keyfile = &quot;./key.key&quot;#访问日志config.accesslog = &quot;access.log&quot;app = Flask(__name__)limiter.init_app(app)@app.route(&#x27;/_api/update&#x27;, methods=[&#x27;POST&#x27;])@limiter.limit(&quot;5 per second&quot;)def update(): token = request.json.get(&#x27;token&#x27;) server_id = request.json.get(&#x27;server_id&#x27;) url = request.json.get(&#x27;url&#x27;) if not token or not url or not server_id: return jsonify(&#123;&#x27;code&#x27;:1002,&#x27;msg&#x27;: &#x27;Missing required parameters.&#x27;&#125;), 400 if token != user_token: return jsonify(&#123;&#x27;code&#x27;:1002,&#x27;msg&#x27;: &#x27;Invalid token.&#x27;&#125;), 400 print(server_id) key = f&#x27;jump_&#123;server_id&#125;&#x27; redis_client.setex(key, 1200, url) return jsonify(&#123;&#x27;code&#x27;:0,&#x27;msg&#x27;: &#x27;ok&#x27;&#125;), 200@app.route(&#x27;/&lt;path:url&gt;&#x27;)@limiter.limit(&quot;30 per second&quot;)def jump(url): for i in range(1, 6): # 从Redis中读取数据 orig_url = None value = redis_client.get(f&#x27;jump_&#123;i&#125;&#x27;) if value: orig_url = value.decode(&#x27;utf-8&#x27;) break if not orig_url: orig_url = mainurl backurl = orig_url + url return redirect(backurl)if __name__ == &#x27;__main__&#x27;: #app.run(debug=True) #app.run() asyncio.run(serve(app, config))运行逻辑： flowchart TD id0([访问]) --> id1[\"判断路径是否为'/_api/update'\"] id1 --> |是| id2[\"读取相关数据计入redis\"] id1 --> |否| id3[\"设初始值为n(n₀=1,","tags":["MNSLXOD"]},{"title":"Windows下的电源计划自动控制","path":"/2023/auto-control-power-plan/","content":"代码部分之前搞了一套E5扔在角落里吃灰，这几天想起来准备当nas用。不过在最高频率下运行功率实在恐怖（140w+），在Windows下限制CPU频率最简单的就是电源计划了，话不多说 123456789101112131415161718192021222324252627282930313233import subprocessimport psutilimport timeBALANCE=&#x27;381b4222-f694-41f0-9685-ff5bb260df2e&#x27;HIGH_PERFORMANCE=&#x27;8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c&#x27;ENERGY_SAVER=&#x27;a1841308-3541-4fab-bc81-f71556f20b4a&#x27;def change_power_plan(plan): subprocess.run(f&#x27;powercfg /S &#123;plan&#125;&#x27;) def get_power_plan(): output = subprocess.run(&quot;powercfg /GETACTIVESCHEME&quot;, shell=True, stdout=subprocess.PIPE).stdout.decode(&quot;GBK&quot;) return output.split(&quot; &quot;)[-3]while True: cpu_percent = psutil.cpu_percent(interval=1) current_time = time.localtime().tm_hour plan = get_power_plan() #print(plan) if current_time &gt;= 23 or current_time &lt;= 6: if plan != ENERGY_SAVER: print(current_time+&quot;：切换到节能模式&quot;) change_power_plan(ENERGY_SAVER) elif cpu_percent &gt; 90: if plan != HIGH_PERFORMANCE: print(current_time+&quot;：切换到高性能模式&quot;) change_power_plan(HIGH_PERFORMANCE) else: if plan != BALANCE: print(current_time+&quot;：切换到平衡模式&quot;) change_power_plan(BALANCE) time.sleep(60) 其中，这一部分需要自己获取 123BALANCE=&#x27;381b4222-f694-41f0-9685-ff5bb260df2e&#x27;HIGH_PERFORMANCE=&#x27;8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c&#x27;ENERGY_SAVER=&#x27;a1841308-3541-4fab-bc81-f71556f20b4a&#x27; 使用powercfg /GETACTIVESCHEME获取电源计划GUID并填入 当时间晚于11点或早于6点时，设置为节能 当CPU占用大于90时，调为高性能 其余时间为平衡 效果为了演示，这里将时间间隔调整为1s 有负载时 PS：电源计划中限制频率的方法","tags":["Windows"]},{"title":"定语从句要点复习（笔记）","path":"/2022/definite-clause-point-review/","content":"要点一：判断1.位于名词或者代词之后： 2.可翻译为“……的”； 3.前后句有重叠部分 要点二：关系代词和关系副词的选择关系代词：that&#x2F;which&#x2F;who&#x2F;whom&#x2F;whose&#x2F;as 关系副词：when&#x2F;where&#x2F;why （&#x3D;介词+which） 1.成分分析法： ​\t定语从句缺主语或宾语，用关系代词： ​\t定语从句完整，不缺主宾，用关系副词。 代入法： ​\t将先行词代入到定语从句中，若刚好完整用关系代词； ​\t若需要补充介词才完整，则用关系副词; 有关习题 要点三：that v.s which在指物的情况下（毕竟which不能指人），that和which一般是可以互换的，但是以下情况不能互换。 用that不用which的四种情况：​\t1.先行词为指物的不定代词或被不定代词修饰：​\t​\t2.先行词被最高级或者序数词修饰；​\t​\t3.先行词被the very，the only或者just the修饰：​\t​\t4.先行词中既有人又有物。 用which不用that的三种情况：​\t1.非限制性定语从句（有逗号）；​\t​\t2.以整个句子作为先行词（非限制性定从）；​\t​\t3.介词后的关系代词。 多写that 要点四：who v.s that在指人的情况下，who和that一般是可以互换的，但是如果先行词是某些代词，比如he,anyone,those等，这时的关系代词应该用who，不用that。 eg: 谁能笑到最后,才是笑得最好: He who laughs last laughs best. 要点五：介词后关系代词的选择介词+（指物）which 介词+（指人）whom 介词后不是加which，就是加whom 要点六： whose + n.*（指物）whose+n.&#x3D;of which + the + n.&#x3D;the + n. + of which （指人）whose+n.&#x3D;of whom + the + n.&#x3D;the + n. + of whom of 可表所属关系，抽象点理解可以得到第二种 whose father = the father of whom 若挖空 ------- the n.则不考虑whose 要点七：as引导的定语从句**as是关系代词** 限制性定语从句：当先行词被such/so/as/the same等修饰（结构类） 非限制性定语从句：as以整个句子作为先行词，翻译为“**正如**” as is known（众所周知）, &#x2F; as is said（据说）,&#x2F; as is reported（据报道）,as is announced（据宣布）,&#x2F;as is expected（据期待）,&#x2F;as we know（正如我们知道的那样）, as we expect（正如我们期待的那样）,&#x2F;as often happens（正如经常发生的那样）,&#x2F;as is often the case（正如通常情况下）,… 要点八：the way 作为先行词的定语从句*I don’t like the way that/in which/省略 you speak to your Mom. 通常为that 要点九：定语从句的主谓一致问题1.定语从句的谓语动词的单复数取决于先行词； 2.当先行词被one of修饰，定从谓语用复数； 当先行词被the only one of修饰，定从谓语用单数； 3.as和which以整个句子作为先行词，定从谓语用单数； 理解 要点十：特殊名词作为先行词的定语从句situation&#x2F;case&#x2F;scene&#x2F;spot&#x2F;point（地步）&#x2F;stage —关系副词用where occasion（时机）—关系副词用when","tags":["笔记"]},{"title":"更便利地操控表彰大会--AHK","path":"/2022/Easier-Control-of-Recognition-Conferences-AHK/","content":"前言前几个月考完月考，第1次月考的时候因为主持人不懂按ppt.经过我舍友一番吹水，给我拉了上去，虽然威风，但我只负责按下一页和播放颁奖曲。 然鹅，放歌的重任着实有点难为我手上的翻页笔，导致我只能反反复复地从后台门旁跑到电脑旁，毕竟不能挡着队伍的道（谢天谢地，那台笔记本的键盘还有多媒体键） 那么，在尴尬了3个小时后，为了应对期中后表彰大会同样的情况，还是要想个对策 思考翻页笔，说白了就是个小键盘（宏），上下翻页自然是上下键，“黑屏”即为B键，再高级的就不是单纯的键盘了。当然，我手上这支来自于我勤俭持家的英语老师，只有下图这几个键 图片在某宝找了个同款 环顾一圈，只有Enter键是用不上的，那不就可以搞一波按键映射，让它成为播放&#x2F;暂停键 实践按键映射还得是老大哥——Autohotkey(AHK) 根据AHK的语法，下面的“句子”便可以实现，复制写入一个文档里并改后缀名为.ahk，导入即可 1Enter::Media_Play_Pause 我这里为了方便将其导出为一个独立程序 事实证明，效果不错，让我还能在里面摸鱼","tags":["AHK"]},{"title":"使用Python半自动生成Altium原理图封装","path":"/2022/ptyhon-with-altium-designer/","content":"前言放长假了，想搞点钱，对我而言来钱最快的就是帮别人画原理图PCB图了。 不过画了几天发现一个问题：一直以来都自己画自己的，而现在帮别人画，客户发的很多原理图的封装都没有，基本上每画一个图都要画两三个，碰到一些小的还好几分钟就能画完，碰到一些大点的芯片引脚多的很的，自己画一个（配上电脑拉跨debuff）还要十几分钟，在立创EDA上面找的又经常有错，很是不爽 不过得益于AD高版本可以以成文本形式保存原理图文件，使用程序完成任务也就成为了可能。 历程随便新建一个原理图以ASCII保存。打开来可以看见这么一份”模板“， 模板123456789101112131415161718192021222324252627282930|HEADER=Protel for Windows - Schematic Capture Ascii File Version 5.0|WEIGHT=38|ISBOC=T|RECORD=31|VISIBLEGRIDON=T|VISIBLEGRIDSIZE=10|DISPLAY_UNIT=4|CUSTOMY=950|BORDERON=T|HOTSPOTGRIDON=T|CUSTOMX=1500|CUSTOMMARGINWIDTH=20|SIZE1=10|SHEETNUMBERSPACESIZE=4|CUSTOMYZONES=4|USEMBCS=T|FONTIDCOUNT=1|SNAPGRIDSIZE=10|SHEETSTYLE=5|SYSTEMFONT=1|HOTSPOTGRIDSIZE=4|FONTNAME1=Times New Roman|TITLEBLOCKON=T|AREACOLOR=16317695|SNAPGRIDON=T|CUSTOMXZONES=6|RECORD=41|ISHIDDEN=T|NAME=CurrentTime|OWNERPARTID=-1|COLOR=8388608|TEXT=*|READONLYSTATE=1|UNIQUEID=WFYPTBEC|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=CurrentDate|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=1|COLOR=8388608|READONLYSTATE=1|UNIQUEID=KRGPTHWR|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Time|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=2|COLOR=8388608|READONLYSTATE=1|UNIQUEID=APNVELVY|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Date|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=3|COLOR=8388608|READONLYSTATE=1|UNIQUEID=DOFGRYNH|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=DocumentFullPathAndName|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=4|COLOR=8388608|READONLYSTATE=1|UNIQUEID=XTILODYM|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=DocumentName|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=5|COLOR=8388608|READONLYSTATE=1|UNIQUEID=CIXOCUKW|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=ModifiedDate|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=6|COLOR=8388608|READONLYSTATE=1|UNIQUEID=CYVLOLHC|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=ApprovedBy|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=7|COLOR=8388608|READONLYSTATE=1|UNIQUEID=UKLMMPSH|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=CheckedBy|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=8|COLOR=8388608|READONLYSTATE=1|UNIQUEID=LGBVFHBI|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Author|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=9|COLOR=8388608|READONLYSTATE=1|UNIQUEID=NNMPOPVS|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=CompanyName|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=10|COLOR=8388608|READONLYSTATE=1|UNIQUEID=ROXAGALI|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=DrawnBy|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=11|COLOR=8388608|READONLYSTATE=1|UNIQUEID=GSEQEJEE|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Engineer|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=12|COLOR=8388608|READONLYSTATE=1|UNIQUEID=NMEAIFPG|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Organization|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=13|COLOR=8388608|READONLYSTATE=1|UNIQUEID=CHTRTWQS|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Address1|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=14|COLOR=8388608|READONLYSTATE=1|UNIQUEID=SLYDDXDR|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Address2|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=15|COLOR=8388608|READONLYSTATE=1|UNIQUEID=JNHWHKQI|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Address3|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=16|COLOR=8388608|READONLYSTATE=1|UNIQUEID=MIQKOJUC|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Address4|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=17|COLOR=8388608|READONLYSTATE=1|UNIQUEID=TBHPRINX|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Title|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=18|COLOR=8388608|READONLYSTATE=1|UNIQUEID=JRIVAVFH|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=DocumentNumber|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=19|COLOR=8388608|READONLYSTATE=1|UNIQUEID=SJJFVEJY|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Revision|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=20|COLOR=8388608|READONLYSTATE=1|UNIQUEID=TPPALWNV|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=SheetNumber|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=21|COLOR=8388608|READONLYSTATE=1|UNIQUEID=IXCDWQOY|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=SheetTotal|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=22|COLOR=8388608|READONLYSTATE=1|UNIQUEID=WLJMRBEM|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Rule|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=23|COLOR=8388608|READONLYSTATE=1|UNIQUEID=SGMPJKTU|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=ImagePath|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=24|COLOR=8388608|READONLYSTATE=1|UNIQUEID=CDHEMVMP|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=ProjectName|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=25|COLOR=8388608|READONLYSTATE=1|UNIQUEID=FMWVHCEF|FONTID=1|HEADER=Icon storage|HEADER=Protel for Windows - Schematic Capture Ascii File Version 5.0 文本是OLE复合文档,有开发需要可以在这个仓库里查看。 Altium schematic file formathttps://github.com/vadmium/python-altium/blob/master/format.md 测试放置一个3PIN可以看到多了这么一部分 1234567891011|RECORD=1|PARTIDLOCKED=T|COLOR=128|SOURCELIBRARYNAME=Miscellaneous Devices.SchLib|OWNERPARTID=-1|DISPLAYMODECOUNT=1|INDEXINSHEET=26|DESIGNITEMID=3PIN|PARTCOUNT=2|LIBREFERENCE=3PIN|LIBRARYPATH=*|LOCATION.X=440|AREACOLOR=11599871|TARGETFILENAME=*|CURRENTPARTID=1|LOCATION.Y=450|UNIQUEID=JDTBOSLP|RECORD=14|ISNOTACCESIBLE=T|LOCATION.X=440|CORNER.Y=450|ISSOLID=T|OWNERPARTID=1|OWNERINDEX=27|CORNER.X=470|COLOR=128|AREACOLOR=11599871|LOCATION.Y=410|DESIGNATOR=1|RECORD=2|NAME=1|LOCATION.X=440|PINLENGTH=20|OWNERPARTID=1|PINCONGLOMERATE=42|ELECTRICAL=4|OWNERINDEX=27|FORMALTYPE=1|LOCATION.Y=440|SWAPIDPIN=1|ISHIDDEN=T|RECORD=41|LOCATION.X=440|NAME=PinUniqueId|OWNERPARTID=-1|OWNERINDEX=29|TEXT=BNSVPWEQ|COLOR=8388608|LOCATION.Y=440|FONTID=1|DESIGNATOR=2|RECORD=2|NAME=2|LOCATION.X=440|PINLENGTH=20|OWNERPARTID=1|PINCONGLOMERATE=42|ELECTRICAL=4|OWNERINDEX=27|FORMALTYPE=1|LOCATION.Y=430|SWAPIDPIN=2|ISHIDDEN=T|RECORD=41|LOCATION.X=440|NAME=PinUniqueId|OWNERPARTID=-1|OWNERINDEX=30|TEXT=DQCSMDTO|COLOR=8388608|LOCATION.Y=430|FONTID=1|DESIGNATOR=3|RECORD=2|NAME=3|LOCATION.X=440|PINLENGTH=20|OWNERPARTID=1|PINCONGLOMERATE=42|ELECTRICAL=4|OWNERINDEX=27|FORMALTYPE=1|LOCATION.Y=420|SWAPIDPIN=3|ISHIDDEN=T|RECORD=41|LOCATION.X=440|NAME=PinUniqueId|OWNERPARTID=-1|OWNERINDEX=31|TEXT=TFWBGGDS|COLOR=8388608|LOCATION.Y=420|FONTID=1|RECORD=34|LOCATION.X=440|NAME=Designator|TEXT=P?|OWNERINDEX=27|OWNERPARTID=-1|COLOR=8388408|INDEXINSHEET=-1|READONLYSTATE=1|LOCATION.Y=450|FONTID=1|RECORD=41|LOCATION.X=440|NAME=Comment|TEXT=3PIN|OWNERINDEX=27|OWNERPARTID=-1|COLOR=8388608|INDEXINSHEET=-1|UNIQUEID=SIFBYFRD|LOCATION.Y=400|FONTID=1|OWNERINDEX=27|RECORD=44 可以看出 12345678RECORD = 1：器件开始2: 引脚14：长方形（背景）34：元件标号41：脚注44：器件结束DESIGNATOR：管脚标号 还有像xy坐标，NAME，COLOR等不必多说 接着就是写个python脚本把它们拼起来辣 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134import osimport sysimport randomimport stringhead2 = &#x27;&#x27;&#x27;|ISBOC=T|RECORD=31|VISIBLEGRIDON=T|VISIBLEGRIDSIZE=10|DISPLAY_UNIT=4|CUSTOMY=950|BORDERON=T|HOTSPOTGRIDON=T|CUSTOMX=1500|CUSTOMMARGINWIDTH=20|SIZE1=10|SHEETNUMBERSPACESIZE=4|CUSTOMYZONES=4|USEMBCS=T|FONTIDCOUNT=1|SNAPGRIDSIZE=10|SHEETSTYLE=8|SYSTEMFONT=1|HOTSPOTGRIDSIZE=4|FONTNAME1=Times New Roman|TITLEBLOCKON=T|AREACOLOR=16317695|SNAPGRIDON=T|CUSTOMXZONES=6|RECORD=41|ISHIDDEN=T|NAME=CurrentTime|OWNERPARTID=-1|COLOR=8388608|TEXT=*|READONLYSTATE=1|UNIQUEID=WFYPTBEC|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=CurrentDate|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=1|COLOR=8388608|READONLYSTATE=1|UNIQUEID=KRGPTHWR|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Time|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=2|COLOR=8388608|READONLYSTATE=1|UNIQUEID=APNVELVY|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Date|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=3|COLOR=8388608|READONLYSTATE=1|UNIQUEID=DOFGRYNH|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=DocumentFullPathAndName|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=4|COLOR=8388608|READONLYSTATE=1|UNIQUEID=XTILODYM|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=DocumentName|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=5|COLOR=8388608|READONLYSTATE=1|UNIQUEID=CIXOCUKW|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=ModifiedDate|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=6|COLOR=8388608|READONLYSTATE=1|UNIQUEID=CYVLOLHC|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=ApprovedBy|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=7|COLOR=8388608|READONLYSTATE=1|UNIQUEID=UKLMMPSH|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=CheckedBy|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=8|COLOR=8388608|READONLYSTATE=1|UNIQUEID=LGBVFHBI|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Author|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=9|COLOR=8388608|READONLYSTATE=1|UNIQUEID=NNMPOPVS|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=CompanyName|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=10|COLOR=8388608|READONLYSTATE=1|UNIQUEID=ROXAGALI|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=DrawnBy|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=11|COLOR=8388608|READONLYSTATE=1|UNIQUEID=GSEQEJEE|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Engineer|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=12|COLOR=8388608|READONLYSTATE=1|UNIQUEID=NMEAIFPG|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Organization|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=13|COLOR=8388608|READONLYSTATE=1|UNIQUEID=CHTRTWQS|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Address1|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=14|COLOR=8388608|READONLYSTATE=1|UNIQUEID=SLYDDXDR|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Address2|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=15|COLOR=8388608|READONLYSTATE=1|UNIQUEID=JNHWHKQI|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Address3|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=16|COLOR=8388608|READONLYSTATE=1|UNIQUEID=MIQKOJUC|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Address4|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=17|COLOR=8388608|READONLYSTATE=1|UNIQUEID=TBHPRINX|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Title|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=18|COLOR=8388608|READONLYSTATE=1|UNIQUEID=JRIVAVFH|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=DocumentNumber|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=19|COLOR=8388608|READONLYSTATE=1|UNIQUEID=SJJFVEJY|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Revision|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=20|COLOR=8388608|READONLYSTATE=1|UNIQUEID=TPPALWNV|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=SheetNumber|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=21|COLOR=8388608|READONLYSTATE=1|UNIQUEID=IXCDWQOY|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=SheetTotal|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=22|COLOR=8388608|READONLYSTATE=1|UNIQUEID=WLJMRBEM|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=Rule|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=23|COLOR=8388608|READONLYSTATE=1|UNIQUEID=SGMPJKTU|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=ImagePath|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=24|COLOR=8388608|READONLYSTATE=1|UNIQUEID=CDHEMVMP|FONTID=1|RECORD=41|ISHIDDEN=T|NAME=ProjectName|TEXT=*|OWNERPARTID=-1|INDEXINSHEET=25|COLOR=8388608|READONLYSTATE=1|UNIQUEID=FMWVHCEF|FONTID=1&#x27;&#x27;&#x27;def main(): Component_overname =input(&quot;输入元件标号(eg:U)：&quot;) Component_name = input(&quot;输入设元件名称(eg:3PIN)：&quot;) Component_pin = int(input(&quot;输入元件引脚数量(eg:30)：&quot;)) Component_size = input(&quot;输入元件宽度(eg:5)：&quot;) Component_rightpin = input(&quot;是否使用右侧引脚(y/n)：&quot;) if Component_size == &#x27;&#x27;: Component_size = 5 if Component_rightpin == &#x27;&#x27;: Component_rightpin = &#x27;y&#x27; if Component_rightpin == &quot;y&quot; or Component_rightpin == &quot;Y&quot;: Component_rightpin = &quot;y&quot; Component_pintype=input(&quot;选择放置类型И/凵/Z(输1为И，2为凵，3为Z)：&quot;) if Component_pintype != &quot;1&quot; and Component_pintype != &quot;2&quot; and Component_pintype != &quot;3&quot;: print(&quot;输入错误，请重新输入&quot;) Component_pintype = input(&quot;选择放置类型И/凵(输1为И，2为凵)：&quot;) if Component_pin &gt;= 35: Constants = 930 else: Constants = 450 x1 = Constants-int(Component_size)*10 if Component_rightpin == &quot;y&quot; : y = Constants+Component_pin*5+10 else: y = Constants+Component_pin*10+10 #print(x1) #print(y) body1 = &#x27;|RECORD=1|PARTIDLOCKED=T|COLOR=128|SOURCELIBRARYNAME=thisprogrambythun888.SchLib|OWNERPARTID=-1|DISPLAYMODECOUNT=1|INDEXINSHEET=26|DESIGNITEMID=&#x27;+str(Component_name)+&#x27;|PARTCOUNT=2|LIBREFERENCE=&#x27;+str(Component_name)+&#x27;|LIBRARYPATH=*|LOCATION.X=&#x27;+str(x1)+&#x27;|AREACOLOR=11599871|TARGETFILENAME=*|CURRENTPARTID=1|LOCATION.Y=&#x27;+str(Constants)+&#x27;|UNIQUEID=&#x27;+str(uniqueid())+&#x27; &#x27; body2 =&#x27;|RECORD=14|ISNOTACCESIBLE=T|LOCATION.X=&#x27;+str(Constants)+&#x27;|CORNER.Y=&#x27;+str(Constants)+&#x27;|ISSOLID=T|OWNERPARTID=1|OWNERINDEX=27|CORNER.X=&#x27;+str(x1)+&#x27;|COLOR=128|AREACOLOR=11599871|LOCATION.Y=&#x27;+str(y)+&#x27; &#x27; body3 =&#x27;&#x27; for i in range(Component_pin): pin_num = i+1 pin_name = input(&quot;输入第&quot;+str(pin_num)+&quot;个pin的名称(eg:TX)：&quot;) if pin_name ==&quot;&quot;: pin_name = pin_num pin_y = y-pin_num*10 index = i*2+27 if Component_rightpin == &quot;y&quot;: if Component_pintype ==&quot;1&quot;: if pin_num&lt;= Component_pin/2: body3 = body3+&#x27;|DESIGNATOR=&#x27;+str(pin_num)+&#x27;|RECORD=2|NAME=&#x27;+str(pin_name)+&#x27;|LOCATION.X=&#x27;+str(x1)+&#x27;|PINLENGTH=20|OWNERPARTID=1|PINCONGLOMERATE=58|ELECTRICAL=4|OWNERINDEX=27|FORMALTYPE=1|LOCATION.Y=&#x27;+str(pin_y)+&#x27; &#x27; body3 = body3+&#x27;|ISHIDDEN=T|RECORD=41|LOCATION.X=&#x27;+str(Constants)+&#x27;|NAME=PinUniqueId|OWNERPARTID=-1|OWNERINDEX=&#x27;+str(index)+&#x27;|TEXT=&#x27;+str(uniqueid())+&#x27;|COLOR=8388608|LOCATION.Y=&#x27;+str(pin_y)+&#x27;|FONTID=1 &#x27; else: pin_y = delete_extra_zero(pin_y+Component_pin/2*10) #print(pin_y) body3 = body3+&#x27;|DESIGNATOR=&#x27;+str(pin_num)+&#x27;|RECORD=2|NAME=&#x27;+str(pin_name)+&#x27;|LOCATION.X=&#x27;+str(Constants)+&#x27;|PINLENGTH=20|OWNERPARTID=1|PINCONGLOMERATE=56|ELECTRICAL=4|OWNERINDEX=27|FORMALTYPE=1|LOCATION.Y=&#x27;+str(pin_y)+&#x27; &#x27; body3 = body3+&#x27;|ISHIDDEN=T|RECORD=41|LOCATION.X=&#x27;+str(Constants)+&#x27;|NAME=PinUniqueId|OWNERPARTID=-1|OWNERINDEX=&#x27;+str(index)+&#x27;|TEXT=&#x27;+str(uniqueid())+&#x27;|COLOR=8388608|LOCATION.Y=&#x27;+str(pin_y)+&#x27;|FONTID=1 &#x27; elif Component_pintype ==&quot;2&quot;: if pin_num&lt;= Component_pin/2: body3 = body3+&#x27;|DESIGNATOR=&#x27;+str(pin_num)+&#x27;|RECORD=2|NAME=&#x27;+str(pin_name)+&#x27;|LOCATION.X=&#x27;+str(x1)+&#x27;|PINLENGTH=20|OWNERPARTID=1|PINCONGLOMERATE=58|ELECTRICAL=4|OWNERINDEX=27|FORMALTYPE=1|LOCATION.Y=&#x27;+str(pin_y)+&#x27; &#x27; body3 = body3+&#x27;|ISHIDDEN=T|RECORD=41|LOCATION.X=&#x27;+str(Constants)+&#x27;|NAME=PinUniqueId|OWNERPARTID=-1|OWNERINDEX=&#x27;+str(index)+&#x27;|TEXT=&#x27;+str(uniqueid())+&#x27;|COLOR=8388608|LOCATION.Y=&#x27;+str(pin_y)+&#x27;|FONTID=1 &#x27; else: pin_y = delete_extra_zero(y-Component_pin/2*10+(pin_num-Component_pin/2-1)*10) #print(pin_y) body3 = body3+&#x27;|DESIGNATOR=&#x27;+str(pin_num)+&#x27;|RECORD=2|NAME=&#x27;+str(pin_name)+&#x27;|LOCATION.X=&#x27;+str(Constants)+&#x27;|PINLENGTH=20|OWNERPARTID=1|PINCONGLOMERATE=56|ELECTRICAL=4|OWNERINDEX=27|FORMALTYPE=1|LOCATION.Y=&#x27;+str(pin_y)+&#x27; &#x27; body3 = body3+&#x27;|ISHIDDEN=T|RECORD=41|LOCATION.X=&#x27;+str(Constants)+&#x27;|NAME=PinUniqueId|OWNERPARTID=-1|OWNERINDEX=&#x27;+str(index)+&#x27;|TEXT=&#x27;+str(uniqueid())+&#x27;|COLOR=8388608|LOCATION.Y=&#x27;+str(pin_y)+&#x27;|FONTID=1 &#x27; elif Component_pintype ==&quot;3&quot;: if (pin_num &amp; 1) == 0: pin_y = y-pin_num*5 #/2*10 body3 = body3+&#x27;|DESIGNATOR=&#x27;+str(pin_num)+&#x27;|RECORD=2|NAME=&#x27;+str(pin_name)+&#x27;|LOCATION.X=&#x27;+str(Constants)+&#x27;|PINLENGTH=20|OWNERPARTID=1|PINCONGLOMERATE=56|ELECTRICAL=4|OWNERINDEX=27|FORMALTYPE=1|LOCATION.Y=&#x27;+str(pin_y)+&#x27; &#x27; body3 = body3+&#x27;|ISHIDDEN=T|RECORD=41|LOCATION.X=&#x27;+str(x1)+&#x27;|NAME=PinUniqueId|OWNERPARTID=-1|OWNERINDEX=&#x27;+str(index)+&#x27;|TEXT=&#x27;+str(uniqueid())+&#x27;|COLOR=8388608|LOCATION.Y=&#x27;+str(pin_y)+&#x27;|FONTID=1 &#x27; else: pin_y = y-(pin_num+1)*5 #/2*10 body3 = body3+&#x27;|DESIGNATOR=&#x27;+str(pin_num)+&#x27;|RECORD=2|NAME=&#x27;+str(pin_name)+&#x27;|LOCATION.X=&#x27;+str(x1)+&#x27;|PINLENGTH=20|OWNERPARTID=1|PINCONGLOMERATE=58|ELECTRICAL=4|OWNERINDEX=27|FORMALTYPE=1|LOCATION.Y=&#x27;+str(pin_y)+&#x27; &#x27; body3 = body3+&#x27;|ISHIDDEN=T|RECORD=41|LOCATION.X=&#x27;+str(x1)+&#x27;|NAME=PinUniqueId|OWNERPARTID=-1|OWNERINDEX=&#x27;+str(index)+&#x27;|TEXT=&#x27;+str(uniqueid())+&#x27;|COLOR=8388608|LOCATION.Y=&#x27;+str(pin_y)+&#x27;|FONTID=1 &#x27; else: body3 = body3+&#x27;|DESIGNATOR=&#x27;+str(pin_num)+&#x27;|RECORD=2|NAME=&#x27;+str(pin_name)+&#x27;|LOCATION.X=&#x27;+str(x1)+&#x27;|PINLENGTH=20|OWNERPARTID=1|PINCONGLOMERATE=58|ELECTRICAL=4|OWNERINDEX=27|FORMALTYPE=1|LOCATION.Y=&#x27;+str(pin_y)+&#x27; &#x27; body3 = body3+&#x27;|ISHIDDEN=T|RECORD=41|LOCATION.X=&#x27;+str(x1)+&#x27;|NAME=PinUniqueId|OWNERPARTID=-1|OWNERINDEX=&#x27;+str(index)+&#x27;|TEXT=&#x27;+str(uniqueid())+&#x27;|COLOR=8388608|LOCATION.Y=&#x27;+str(pin_y)+&#x27;|FONTID=1 &#x27; head1 = &#x27;|HEADER=Protel for Windows - Schematic Capture Ascii File Version 5.0|WEIGHT=&#x27;+str(index+10)+&#x27; &#x27; body4=&#x27;|RECORD=34|LOCATION.X=&#x27;+str(Constants)+&#x27;|NAME=Designator|TEXT=&#x27;+str(Component_overname)+&#x27;|OWNERINDEX=27|OWNERPARTID=-1|COLOR=8388608|INDEXINSHEET=-1|READONLYSTATE=1|LOCATION.Y=&#x27;+str(Constants)+&#x27;|FONTID=1 &#x27; body5 = &#x27;|RECORD=41|LOCATION.X=&#x27;+str(Constants)+&#x27;|NAME=Comment|TEXT=&#x27;+str(Component_name)+&#x27;|OWNERINDEX=27|OWNERPARTID=-1|COLOR=8388608|INDEXINSHEET=-1|UNIQUEID=&#x27;+str(uniqueid())+&#x27;|LOCATION.Y=&#x27;+str(Constants-10)+&#x27;|FONTID=1 &#x27; body6= &#x27;&#x27;&#x27;|OWNERINDEX=27|RECORD=44|HEADER=Icon storage|HEADER=Protel for Windows - Schematic Capture Ascii File Version 5.0 &#x27;&#x27;&#x27; allofthem = head1+head2+body1+body2+body3+body4+body5+body6 filename = Component_name+&quot;.SchDoc&quot; with open(filename,&quot;w&quot;) as f: f.write(allofthem) print(&quot;生成成功，文件名为&quot;+filename) os.system(&quot;start &quot;+filename) return filenamedef uniqueid(): &quot;&quot;&quot;生成8位随机大写字母=&gt;uniqueid!&quot;&quot;&quot; return &#x27;&#x27;.join(random.sample(string.ascii_uppercase, 8))def delete_extra_zero(n): &quot;&quot;&quot;删除小数点后多余的0&quot;&quot;&quot; n = &#x27;&#123;:g&#125;&#x27;.format(n) n = float(n) if &#x27;.&#x27; in n else int(n) return nif __name__ == &quot;__main__&quot;: os.system(&quot;start &quot;+main()) sys.exit() 再生成原理图库复制到自己的库就行了 小说明放置类型 И 凵(常用) Z 执行效果 值得注意的点1. 在“模板”的头部中，WEIGHT代表着剩余的部件量，如果设置的太小当AD读取完后就不会往下读了，就会导致缺这缺那 1|HEADER=Protel for Windows - Schematic Capture Ascii File Version 5.0|WEIGHT=38 2.同样在“模板”的头部中，第二行中包括了纸张大小等的定义，如果遇到🐞可以适当修改 3.引脚方向依据PINCONGLOMERATE的值，连接方向向右时为56，从此每逆时针旋转90°加一 4.xy坐标必须为不带小数的整数，不然它立马扑街给你看","tags":["python"]},{"title":"2021旧年总结","path":"/2022/2021旧年总结/","content":"2021 has ended but 2022 begins新年伊始，又是新的一年。做个年终总结吧。证明我还活着 先看看曾经定的Todo list 进到实验班。 设立导航 被百度收录。看淡了，我把站点地图怼它脸上，写个脚本每4分钟提交一次，还没收录，百度是神马东西 写个基于cfw的工具。写了不少 Golang入门。大概吧 过去的一年，好像时间变快了不少，不知不觉就过去了。6月份往前都在备考生地，放个暑假回来后又是各种考试，两周一休算了算回家的次数好像还不到10次 学会了很多，也见证了不少（省略数千字） 定个目标 考上一中! （和学校有约~ 最好再进实验班 附因为没啥时间，也没有写到什么实质上的内容，不过也有2200+的小伙伴来访~ 祝各位虎年大吉，虎虎生威","tags":["yearreport"]},{"title":"把玩intel的开发服务器","path":"/2021/把玩intel的开发服务器/","content":"获取打开Intel® DevCloud，有账号登录，没账号注册， 拉下来找到Intel® DevCloud for the Edge点进去 注意邮箱 在看到Server not running这个话前基本都500错误或者点了没反应，等半个小时就好(也可以切换网络环境等) 打开终端 然后就可以为所欲为了没有root的啦 配置80核，256g( ‵▽′)ψ，（共用） proot容器内测试 网速Asia Another 伪获取root权限在终端内复制粘贴以下命令 123wget https://share.hzchu.top/%E8%BD%AF%E4%BB%B6/root.shchmod 777 root.sh./root.sh 当$变为#就ok 不过wget,curl这些都没有，所以还要自行安装 PS:可以开新一个终端下载一些必要依赖包（deb）再离线安装 https://packages.debian.org 该服务器使用时间只有10小时，但10小时后还可以再来一次","tags":["Intel"]},{"title":"解决Cloudflare Wrangler无法获取授权","path":"/2021/解决Cloudflare-Wrangler无法获取授权/","content":"前言昨天，因为要本地提交点东西到worker就装了Wrangler，没想到啊，它就这么卡着不动了（在waiting for api token那里我等了半个世纪） 方法 在刚刚的授权页面点击API令牌 点投放–copy 输入wrangler config,粘贴刚刚copy的token 回车后看到sucess就好了 后写的时侯为了截图换了个账号，然后它能用了~~~~","tags":["Clouddlare"]},{"title":"解决VSCode安装Go扩展报错","path":"/2021/解决VSCode安装Go扩展报错/","content":"不多哔哔，直入主题 先转到新建环境变量这里（图示为win11 新建2个（如图） 变量名 变量值 GOPROXY https://goproxy.io GO111MODULE on 点确定后重启再进VSCode里选择install all安装就好","tags":["Go"]},{"title":"为Stellar主题添加HPP的\"说说\"功能","path":"/2021/为Stellar主题添加HPP说说功能/","content":"HPP,即HexoPlusPlus,其中自带了”说说”功能，但我正在用的Stellar不支持，那就自己加吧 与某个页面合并了 选址纵观全局，我看到了左侧栏的”文章”，加了进去，却成了这个鸟样子（橙框为我手动框出来的） 再品，放这里不就好了😎 开工因为主题在不同语言时有不同显示，所以先从语言文件下手 找到”归档”对应的是archives，再用everything在主题文件中搜索 前4个是语言文件，第5个是生成归档页面的，那第6个就有很大嫌疑了，打开看看 啊没错，就是它，而且类名也对的上（当初直接查类名更快啊＞﹏＜） 格式就像这样 1234567&lt;% if (site.posts &amp;&amp; site.posts.length &gt; 0) &#123; %&gt; &lt;% if (is_archive()) &#123; %&gt; &lt;a class=&#x27;active&#x27; href=&#x27;&lt;%- url_for(config.archive_dir) %&gt;&#x27;&gt;&lt;%- __(&#x27;btn.archives&#x27;) %&gt;&lt;/a&gt; &lt;% &#125; else &#123; %&gt; &lt;a href=&#x27;&lt;%- url_for(config.archive_dir) %&gt;&#x27;&gt;&lt;%- __(&#x27;btn.archives&#x27;) %&gt;&lt;/a&gt; &lt;% &#125; %&gt;&lt;% &#125; %&gt; 添加上去后把所有archives给替换成了htalk,但是一运行那报错和放鞭炮没什么不同(。﹏。) 从代码上说，这句是判断当前是什么页面的，我翻了亿下没找到它的定义在哪个文件，就先改回posts（只是影响了按钮底色，问题不大(❁´◡`❁)） 在\\themes\\stellar\\layout下新建htalk.ejs,从隔壁tag.ejs借鉴点代码过来，除了site.tags.length其他都改为htalk 可以看出第11行到21行都是页面中可以显示出来的部分~~（不太严谨的样子~~ 把HPP文档中的”引入部分”插到里面 ¯_(ツ)_&#x2F;¯ 加个题目 1&lt;h1 class=&#x27;list-title h3&#x27;&gt;说说（瞎扯）&lt;/h1&gt; 承 接 前 文，看着”说说”按钮选中时没有底色还是有点不爽，回到前面 把判定部分都删了删到只剩下一个基础的判定（虽然没用但删了就报错），给它加上id=&quot;nav-bb&quot;的属性 再在htalk.ejs中加上 1&lt;script&gt;document.getElementById(&#x27;nav-bb&#x27;).className=&#x27;active&#x27;&lt;/script&gt; ( •̀ ω •́ )✧ 最终代码 !!! warning1.记得使用hexo new page htalk并在layout中改为htalk2.在博客根目录下的_config.yml中要指明htalk_dir: htalk","tags":["blog"]},{"title":"优化Oneindex的nexmoe主题的加载速度","path":"/2021/优化Oneindex的nexmoe主题的加载速度/","content":"在一些带宽小的机子上部署Oneindex又用nexmoe主题，就算套了cdn也慢（深有体会） 在学校开来给同学下电影开了十几秒愣是没加载出来 方法定位到网址目录下的&#x2F;view&#x2F;nexmoe 将框选的（第7行的第11行） 进行替换 第7行 1&lt;link rel=&quot;stylesheet&quot; href=&quot;//unpkg.com/mdui@1.0.1/dist/css/mdui.min.css&quot;&gt; 第11行 1&lt;script src=&quot;//raw.githubusercontent.com/thun888/tuku/master/img/mdui.min.js&quot;&gt;&lt;/script&gt; like this 结果修改前 修改后","tags":["oneindex","web"]},{"title":"高质量地从ico转为svg","path":"/2021/高质量地从ico转为svg/","content":"How先下载&amp;安装CorelDRAW 打开ps将ico转为png 导出后像这样 选择 文件—导入—（选择刚刚的图） 放置在画纸后 右键—轮廓描慕—高质量图像（也可以选其他的,根据实际情况~） 在这里你可以改变三个参数实现不同的效果 点击确定后就能得到2个图像（原来的位图和生成的矢量图） 把原图删掉后将画布调整为生成图大小（例如我这就是210*210） 选择 文件—导出（保存为.svg) 后记要真想更好一点可以用这个为底，重绘一遍","tags":["网站","转换"]},{"title":"解决小米手机升级MIUI12.5后无法进入谷歌商店","path":"/2021/解决小米手机升级MIUI12-5后无法进入谷歌商店/","content":"之前，用着被抛弃的mi6，升级了12后并无异样，但用第三方包升到12.5后，欸，用不了了 （如图） 显然，是新版的“照明弹”引起的 搜索一下可以看到有好几个 把里面每一个权限选择了“空白通行证”的改为“始终允许”","tags":["MIUI"]},{"title":"VM虚拟机安装甜糖及配置教程","path":"/2021/vm虚拟机安装甜糖及配置教程/","content":"文章部分内容不再适用背景一开始我是在电脑上挂网心，但这玩意儿写入缓存不仅多（以至于写掉盘了），钱还给的少。而甜糖在恩山论坛上面的都是Linux下操作的，对我这docker小白很不友好，今天就总结一下最简单的方法 以下内容建议使用FinalShell操作 准备工作 映像包（500g&#x2F;100g)(在我写的时候又有新版了) vmware 安装 安装vmware(废话) 解压压缩包后。点击后缀为vmx的文件导入 然后点击网络适配器一来生成新的MAC地址（避免用uid重复） 点击开启虚拟机 当然开起成功后就可以通过甜糖app绑定了 当然有时候如果你的网络环境比较复杂搜不到就要在ssh里面查看。 使用ssh连接(账号密码都是root) 输入(进入容器) 12docker exec -it ttnode /bin/bash/usr/node/ttnode -p /mnts 用二维码生成工具，把uid生成二维码再用手机扫码绑定. 如果它显示未配置网络的话就继续看吧 new Artalk({ el: '#ArtalkComments', // 元素选择 placeholder: '来啊，快活啊 ( ゜- ゜)', // 占位符 noComment: '快来成为第一个评论的人吧\\~', // 无评论时显示 serverUrl: 'https://artalk.hzchu.top/', readMore: { // 阅读更多配置 pageSize: 15, // 每次请求获取评论数 autoLoad: true // 滚动到底部自动加载 } }); 输入 1netstat -tnlp 除计下出65432和22以外的三个端口后在路由器后台设置端口转发这里，以小米路由器为例 等上十几二十分钟甜糖后台同步后即可。 这样甜糖就做好了，但是还有很多东西也可以搞 1.自动领取星愿 保持在容器内不要退出 输入 12apt updateapt install wget curl sudo -y 1wget https://dachui.co/ttnode/node2.sh &amp;&amp; sh node2.sh 输入no后回车(第2步输入y回车即可) 这里面还有很多功能，但我用到的只是5，有需求的可以把都搞上(除了1.2) 选择5后回车 输入手机号码 输入验证码即可 如果还要用到微信通知就继续 在server酱的官网用登录+微信关注后取得sckey填入 成功以后 3.网速监控 虽然FinalShell自带网速监控，但也不总是每天都在电脑旁 输入 1apk add nload 然后就可以通过nload eth0来监控了 Q&amp;A Q:明明什么都设置好了，但就是获取不了IP。 A:(该问题常见于多网卡的情况) 2.Q:为什么收不到验证码？ ​ A:再来一次(如果你一天内已经错了14次的话，就明天再做吧) 3.Q:输指令报错 xxx not found A:缺啥补啥，在容器外用apk add xxx ,容器内用apt install xxx more…. 所参考资料[2021-01-27]让软路由来赚钱ESXi&#x2F;X86上跑dock甜糖&#x2F;一键导入简单无脑，小白，懒人专属 【非op套娃】x86以ubuntu为底层跑docker甜糖服务 迄今为止最小的甜糖(ttnode)docker镜像 爱快虚拟机甜糖镜像及pve,esxi等虚拟机安装轻量化Linux详细安装甜糖教程","tags":["甜糖"]},{"title":"搭建Teambition网盘的目录索引","path":"/2021/搭建Teambition网盘的目录索引/","content":"github链接：TeambitionShare 文章已过期！准备 Teambition账号 一台云服务器&#x2F;支持PHP的虚拟主机 安装这里以宝塔面板为例 先创建 从github把源码下载后上传然后解压 进到&#x2F;TeambitionShare-master里把源码拉出来 gif: 然后配置伪静态（不设置会404） Nginx 123456789101112#根目录伪静态location / &#123; if (!-e $request_filename)&#123; rewrite ^(.*)$ /index.php/?s=$1; &#125;&#125;#二级目录伪静态，自行修改pan为你的二级目录名字location /pan &#123; if (!-e $request_filename)&#123; rewrite ^/pan/(.*)$ /pan/index.php/?s=$1; &#125;&#125; Apache 1234567&lt;IfModule mod_rewrite.c&gt; Options +FollowSymlinks -Multiviews RewriteEngine On RewriteCond %&#123;REQUEST_FILENAME&#125; !-d RewriteCond %&#123;REQUEST_FILENAME&#125; !-f RewriteRule ^(.*)$ index.php/?s=$1 [QSA,PT,L]&lt;/IfModule&gt; 在www.teambition.com上登录账号 新建一个项目（更多里）（不创建项目网盘中的所有的内容都会展示出来） 获取项目id 获取cookie 访问刚刚部署的网站，把cookie和项目id填好 （如果出现500可以删除&#x2F;config&#x2F;app.cfg.php重来） ok","tags":["web"]},{"title":"用Batocera搭建属于你的游戏天地","path":"/2020/用batocera搭建属于你的游戏天地/","content":"batocera,是一个以linux为基础，运行在电脑上的一个模拟上古游戏机的系统。 为了使用它，首先我们需要以下物品 准备 手和脑子 U盘（最好3.0，不过2.0也能运行） 电脑 balenaEtcher（选用）（安装方法一） Ventoy（选用）（安装方法二） 安装方法一声明：这种方法会丢失U盘全部数据，需要备份 安装好balenaEtcher 打开来是这个样子 下载好batocera 点击flash from file,选择刚刚下载好的镜像 点击 Select target,选择你准备好的U盘 确认选择无误后点击 Flash！ 即可完成 安装方法二声明：这种方法会丢失U盘全部数据，需要备份（但相比第一种还可以用来存文件~) 下载ventoy解压后点Ventoy2Disk.exe运行 next， 然后将刚刚下载后的镜像复制进U盘里（最大的那个分区）即可 后： 在一些电脑上要按F12选择从U盘启动 它将全部机能分配在游戏运行上，相比模拟器性能好许多，对老电脑友好","tags":["linux"]},{"path":"/sw-register.js","content":"navigator.serviceWorker.getRegistrations().then(function(registrations) { for(let registration of registrations) { registration.unregister() } })"},{"title":"关于","path":"/about/index.html","content":"关于友链留言thun888 关于本站 一开始只是想要学习html吧，现在主要是为了记录自己折腾过的时光。 想到什么写什么，内容比较杂。 不过，碍于博主水平有限，可能质量上会存在不足之处，欢迎指点 关于我 广东湛江某学校的一名高二学生，成绩还行吧。 爱好挺广，就是不咋爱运动。 平时大部分时间在学校，有事情回家才会处理： 目前参与/开发项目 Mirouter-ui 峰间云海MC服务器 捐赠 Alipay Wechat"},{"title":"更新历程","path":"/big/index.html","content":"2024&#x2F;2&#x2F;151.不再使用 hexo-offline-popup 插件，尝试使用 ClientWorker2024&#x2F;2&#x2F;061.升级主题2.修订部分内容2023&#x2F;1&#x2F;211.更换域名，新的一年，新的开始🕊️（原域名将全部作跳转或共存，直到过期）2.修订部分内容2022&#x2F;8&#x2F;18去除冗杂功能修订该页更换部分图片链接11&#x2F;261.增加长时间未更新提醒10&#x2F;291.更新评论系统前端，后端（PHP -&gt; Go）2.对一部分“文章”进行归档处理9&#x2F;111.调整页面宽度9&#x2F;101.合并仓库&amp;开源7&#x2F;301.实现集成化部署7&#x2F;29开放友链及留言页面7&#x2F;28调整博客域名(hzchu.top &#x3D;&gt;blog.hzchu.top)7&#x2F;201.添加搜索页面2.完善了下about页面，有空继续7&#x2F;17新增”更新历程”页面2021&#x2F;5&#x2F;?~2021&#x2F;7&#x2F;14日常修改"},{"title":"友链","path":"/friends/index.html","content":"朋友们 陈YF的博客空山柠语Xunflash的小站QWQAQ土土博客Joseph Z.Fgaoxing字节君Xlenco网笙久久柠萌の部落wyj5211的小站NMSLDahi Blog二月 其他网站 TYZ版官网一个垃圾游戏的官网 我可以交换友链吗？ 内容不能违反中国大陆法律 如果存在大量违法色情信息（包括但不限于）经举报&#x2F;检查发现后永久移除 如果您的网站超过90天无方式访问将会移除 如果友链信息有变更可以在下方留言 吾之链 123456title: Thun888&#x27;s Blogavatar: https://blog.hzchu.top/img/avatar.webpurl: https://blog.hzchu.topscreenshot: https://onep.hzchu.top/mount/pic/blog-hzchu-top.pngbackground: https://onep.hzchu.top/mount/pic/2024/02/06/65c236823dbca.webpdescription: 夏日当空,心如深渊 目前已取消自助友链申请，如果你想与我交换友链的话请在下方留言哦！"},{"path":"/js/notyf.min.js","content":"var Notyf=function(){\"use strict\";var e,o=function(){return(o=Object.assign||function(t){for(var i,e=1,n=arguments.length;e"},{"path":"/js/tianli_gpt.js","content":"console.log(\" %c Post-Abstract-AI 开源博客文章摘要AI生成工具 %c https://github.com/zhheo/Post-Abstract-AI \", \"color: #fadfa3; background: #030307; padding:5px 0;\", \"background: #fadfa3; padding:5px 0;\") function tianliGPT(usePjax) { var tianliGPTIsRunning = false; function insertAIDiv(selector) { // 首先移除现有的 \"post-TianliGPT\" 类元素（如果有的话） removeExistingAIDiv(); // 获取目标元素 const targetElement = document.querySelector(selector); // 如果没有找到目标元素，不执行任何操作 if (!targetElement) { return; } // 创建要插入的HTML元素 const aiDiv = document.createElement('div'); aiDiv.className = 'post-TianliGPT'; const aiTitleDiv = document.createElement('div'); aiTitleDiv.className = 'tianliGPT-title'; aiDiv.appendChild(aiTitleDiv); const aiIcon = document.createElement('i'); aiIcon.className = 'tianliGPT-title-icon'; aiTitleDiv.appendChild(aiIcon); // 插入 SVG 图标 aiIcon.innerHTML = ` 机器人 `; const aiTitleTextDiv = document.createElement('div'); aiTitleTextDiv.className = 'tianliGPT-title-text'; aiTitleTextDiv.textContent = 'AI摘要'; aiTitleDiv.appendChild(aiTitleTextDiv); const aiTagDiv = document.createElement('div'); aiTagDiv.className = 'tianliGPT-tag'; aiTagDiv.id = 'tianliGPT-tag'; aiTagDiv.textContent = 'DolGPT'; aiTitleDiv.appendChild(aiTagDiv); const aiExplanationDiv = document.createElement('div'); aiExplanationDiv.className = 'tianliGPT-explanation'; aiExplanationDiv.innerHTML = '生成中...' + ''; aiDiv.appendChild(aiExplanationDiv); // 将 tianliGPT-explanation 插入到 aiDiv，而不是 aiTitleDiv // 将创建的元素插入到目标元素的顶部 targetElement.insertBefore(aiDiv, targetElement.firstChild); } function removeExistingAIDiv() { // 查找具有 \"post-TianliGPT\" 类的元素 const existingAIDiv = document.querySelector(\".post-TianliGPT\"); // 如果找到了这个元素，就从其父元素中删除它 if (existingAIDiv) { existingAIDiv.parentElement.removeChild(existingAIDiv); } } var tianliGPT = { //读取文章中的所有文本 getTitleAndContent: function() { try { const title = document.title; const container = document.querySelector(tianliGPT_postSelector); if (!container) { console.warn('DolGPT：找不到文章容器。请尝试将引入的代码放入到文章容器之后。如果本身没有打算使用摘要功能可以忽略此提示。'); return ''; } const paragraphs = container.getElementsByTagName('p'); const headings = container.querySelectorAll('h1, h2, h3, h4, h5'); let content = ''; for (let h of headings) { content += h.innerText + ' '; } for (let p of paragraphs) { // 移除包含'http'的链接 const filteredText = p.innerText.replace(/https?:\\/\\/[^\\s]+/g, ''); content += filteredText; } const combinedText = title + ' ' + content; let wordLimit = 1000; if (typeof tianliGPT_wordLimit !== \"undefined\") { wordLimit = tianliGPT_wordLimit; } const truncatedText = combinedText.slice(0, wordLimit).replace('本文采用 署名-非商业性使用-相同方式共享 4.0 国际 许可协议，转载请注明出处。', ''); return truncatedText; } catch (e) { console.error('DolGPT错误：可能由于一个或多个错误导致没有正常运行，原因出在获取文章容器中的内容失败，或者可能是在文章转换过程中失败。', e); return ''; } }, fetchTianliGPT: async function(content) { if (!tianliGPT_key) { return \"没有获取到key，代码可能没有安装正确。如果你需要在tianli_gpt文件引用前定义tianliGPT_key变量。详细请查看文档。\"; } if (tianliGPT_key === \"5Q5mpqRK5DkwT1X9Gi5e\") { return \"请购买 key 使用，如果你能看到此条内容，则说明代码安装正确。\"; } var currentPath = window.location.pathname; var url = \"https://blog.hzchu.top\" + currentPath; if (currentPath === \"/friends/\") { return \"欢迎各位申请友链~\"; } disablePaths = [\"/big/\"]; if (disablePaths.includes(currentPath)) { document.querySelectorAll('.post-TianliGPT').forEach(el => { el.style.display = 'none'; }) return } // use get method to avoid CORS check const apiUrl = `https://dolgpt.hzchu.top/?content=${encodeURIComponent(content)}&key=${encodeURIComponent(tianliGPT_key)}&url=${encodeURIComponent(url)}`; const timeout = 20000; // 设置超时时间（毫秒） try { const controller = new AbortController(); const timeoutId = setTimeout(() => controller.abort(), timeout); const response = await fetch(apiUrl, { signal: controller.signal }); if (response.ok) { const data = await response.json(); if (data[\"summary\"].startsWith(\"当前文章\")){ tianliGPT_typingAnimate = false; } return data.summary; } else { if (response.status === 402) { document.querySelectorAll('.post-TianliGPT').forEach(el => { el.style.display = 'none'; }); } throw new Error('DolGPT：余额不足，请充值后请求新的文章'); } } catch (error) { if (error.name === 'AbortError') { if (window.location.hostname === 'localhost') { console.warn('警告：请勿在本地主机上测试 API 密钥。'); return '获取文章摘要超时。请勿在本地主机上测试 API 密钥。'; } else { console.error('请求超时'); return '获取文章摘要超时。当你出现这个问题时，可能是key或者绑定的域名不正确。也可能是因为文章过长导致的 AI 运算量过大，您可以稍等一下然后刷新页面重试。'; } } else { console.error('请求失败：', error); return '获取文章摘要失败，请稍后再试。'; } } }, aiShowAnimation: function (text) { const element = document.querySelector(\".tianliGPT-explanation\"); if (!element) { return; } if (tianliGPTIsRunning) { return; } // 检查用户是否已定义tianliGPT_typingAnimate并且其值为false if (typeof tianliGPT_typingAnimate !== \"undefined\" && !tianliGPT_typingAnimate) { // 如果用户已定义tianliGPT_typingAnimate并且其值为false，则立即显示完整文本 element.innerHTML = text; return; } tianliGPTIsRunning = true; const typingDelay = 25; const waitingTime = 1000; const punctuationDelayMultiplier = 6; element.style.display = \"block\"; element.innerHTML = \"生成中...\" + ''; let animationRunning = true; let currentIndex = 0; let initialAnimation = true; let lastUpdateTime = performance.now(); const animate = () => { if (currentIndex < text.length && animationRunning) { const currentTime = performance.now(); const timeDiff = currentTime - lastUpdateTime; const letter = text.slice(currentIndex, currentIndex + 1); const isPunctuation = /[，。！、？,.!?]/.test(letter); const delay = isPunctuation ? typingDelay * punctuationDelayMultiplier : typingDelay; if (timeDiff >= delay) { element.innerText = text.slice(0, currentIndex + 1); lastUpdateTime = currentTime; currentIndex++; if (currentIndex < text.length) { element.innerHTML = text.slice(0, currentIndex) + ''; } else { element.innerHTML = text; element.style.display = \"block\"; tianliGPTIsRunning = false; observer.disconnect();// 暂停监听 } } requestAnimationFrame(animate); } } // 使用IntersectionObserver对象优化ai离开视口后暂停的业务逻辑，提高性能 const observer = new IntersectionObserver((entries) => { let isVisible = entries[0].isIntersecting; animationRunning = isVisible; // 标志变量更新 if (animationRunning && initialAnimation) { setTimeout(() => { requestAnimationFrame(animate); }, 200); } }, { threshold: 0 }); let post_ai = document.querySelector('.post-TianliGPT'); observer.observe(post_ai);//启动新监听 }, } function runTianliGPT() { insertAIDiv(tianliGPT_postSelector); const content = tianliGPT.getTitleAndContent(); if (content) { console.log('DolGPT本次提交的内容为：' + content); } tianliGPT.fetchTianliGPT(content).then(summary => { tianliGPT.aiShowAnimation(summary); }) } function checkURLAndRun() { if (typeof tianliGPT_postURL === \"undefined\") { runTianliGPT(); // 如果没有设置自定义 URL，则直接执行 runTianliGPT() 函数 return; } try { const wildcardToRegExp = (s) => { return new RegExp('^' + s.split(/\\*+/).map(regExpEscape).join('.*') + '$'); }; const regExpEscape = (s) => { return s.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'); }; const urlPattern = wildcardToRegExp(tianliGPT_postURL); const currentURL = window.location.href; if (urlPattern.test(currentURL)) { runTianliGPT(); // 如果当前 URL 符合用户设置的 URL，则执行 runTianliGPT() 函数 } else { console.log(\"DolGPT：因为不符合自定义的链接规则，我决定不执行摘要功能。\"); } } catch (error) { console.error(\"DolGPT：我没有看懂你编写的自定义链接规则，所以我决定不执行摘要功能\", error); } } if (usePjax) { checkURLAndRun(); }else { document.addEventListener(\"DOMContentLoaded\", function () { checkURLAndRun(); }); } } tianliGPT(false); document.addEventListener('pjax:complete', function () { tianliGPT(true); })"},{"path":"/mcss/mcss.css","content":"/* 文章过期提醒 */ .old-message { padding: 5px 10px; font-size: 15px; border: 1px solid #e2e2e2; background-color: #eee; border-left: 5px solid #00d1bf; color: #333; overflow: hidden; } /* 字数统计 */ .wordcount { color: #31708f; background-color: #d9edf7; border-color: #bce8f1; border: 1px dashed #e0e0e0; padding: 1em 28px; margin-top: 5px; border-radius: 0; text-align: center; } #expired-message { padding: 10px 1rem 10px 1rem; }"},{"title":"留言版","path":"/say/index.html","content":"留言/评论须知：禁止发表违法暴乱，黄赌毒（包括但不限于）的言论本站支持邮件发送评论信息（收到回复时），在评论时请务必使用真实可用的邮箱（如果没有收到回复邮件可以把noreplay@hzchu.top加入白名单）拒绝无意义灌水，同ip五次以上封禁网址（包括昵称指向和评论内容）禁止以下类型推广链接（包括引流，拉人头等）含色情，反动（包括但不限于）广告链接（京东淘宝等，不过会看情况处理，合理讨论不会删除）如果遇到加载缓慢记得刷新~ 当然，记住文明上网，合理发言就好U*•ェ•U 在下方开始留言吧~"},{"path":"/img/dynmap_markers/marker_DIM-1.json","content":"{\"sets\":{\"markers\":{\"hide\":false,\"circles\":{},\"areas\":{},\"label\":\"Markers\",\"markers\":{\"_spawn_DIM-1\":{\"markup\":false,\"x\":-16,\"icon\":\"world\",\"y\":69,\"dim\":\"16x16\",\"z\":-16,\"label\":\"Spawn\"}},\"lines\":{},\"layerprio\":0}},\"timestamp\":1683970474369}"},{"path":"/img/dynmap_markers/marker_DIM1.json","content":"{\"sets\":{\"markers\":{\"hide\":false,\"circles\":{},\"areas\":{},\"label\":\"Markers\",\"markers\":{\"_spawn_DIM1\":{\"markup\":false,\"x\":-16,\"icon\":\"world\",\"y\":69,\"dim\":\"16x16\",\"z\":-16,\"label\":\"Spawn\"}},\"lines\":{},\"layerprio\":0}},\"timestamp\":1683970474369}"},{"path":"/img/dynmap_markers/marker_world.json","content":"{\"sets\":{\"markers\":{\"hide\":false,\"circles\":{},\"areas\":{},\"label\":\"Markers\",\"markers\":{\"_spawn_world\":{\"markup\":false,\"x\":-16,\"icon\":\"world\",\"y\":69,\"dim\":\"16x16\",\"z\":-16,\"label\":\"Spawn\"}},\"lines\":{},\"layerprio\":0}},\"timestamp\":1683970474368}"},{"title":"About Artalk","path":"/wiki/Artalk-doc/index.html","content":"Artalk 一款简洁有趣的自托管评论系统 官方文档：[Artalk(v2)](https://artalk.js.org/)，本文档做存档处理，不再更新 特性 有趣有爱 自托管 支持Markdown 表情自定 滑稽表情包 管理员密码，防冒名 验证码，提交频率限制 通知中心，邮件提醒 仅管理员可评论 无限层级回复 滚动加载更多 内容自动保存 暗黑模式 评论折叠 一页多个评论 TypeScript 内容摘自Artalk仓库 本页面最后编辑时间为2021&#x2F;7&#x2F;21，在日后的版本中可能不再适用，请以官方仓库信息为准"},{"title":"峰间云海","path":"/wiki/fcloud/index.html","content":"Hey这里是峰间云海官方文档 简要介绍这是一个纯生存¹的公益服（1.20.1），为了更多玩家游玩，我们关闭了正版验证²。采用fabric服务端，偏生电。同时，我们加入了一些实用类插件³，在不破坏原版体验下提高玩家体验。 注： 内测期间玩家流失严重，开启了死亡不掉落降低难度 为规范玩家行为，维护游戏内秩序，我们实行一QQ一游戏名绑定制度（白名单）。若无QQ，亦可通过有效联系方式向我们发送申请 以下为插件列表： MOD名 简析 Carpet 地毯端，提供一些实用的功能 Carpet-tis 一个 Carpet (fabric-carpet) 的扩展 mod gugle-carpet-addition 一个 Carpet (fabric-carpet) 的扩展 mod CarpetTCTCAddition 一个 Carpet (fabric-carpet) 的扩展 mod essentialaddons 一个 Carpet (fabric-carpet) 的扩展 mod minitweaks 一个 Carpet (fabric-carpet) 的扩展 mod Voicechat 语音聊天，需搭配对应客户端mod ShowMeWhatYouGot 在聊天框中展现物品 Dynmap 在线地图 Essential_commands 提供一些实用的命令 Image2map 将图片转化为地图 HTM 用于保护您的箱子、潜影盒、木桶、熔炉、高炉、烟熏炉等容器并设置信任人们打开它们。 Letmedespawn 即便一个生物拿起过武器、盔甲或者别的东西，它也会自然消失。当它们消失时，拿起的东西都会重新掉到地上 syncmatica 共享原理图 Deathlog 死亡日志，记录死亡地点和背包物品 servux MiniHUD服务端 Debugify 修bug Starlight 优化光照渲染 quickshulker 空中开盒 NoChatReports 禁止聊天举报 Jade 玉支持 LuckPerms 权限管理 C^2M 优化 lithium 优化 krypton 优化 Ferritecore 优化 Clumps 优化 Chunky 区块预加载 chunksending 优化 nounusedchunks 优化 smoothchunk 优化 servercore 优化 MCMOD 优化 memoryleakfix 优化 vmp 优化 MCDR list: 扩展名 简析 AdvancedCalculator 计算器 Beep @对方 DayCountNBT 显示开服天数 Bot 记录假人 QuickBackupM 备份 talk 记录玩家聊天信息 游玩流程 添加Q群 如果没有QQ，可在此填写问卷。（2个星期审核一次） 考虑到一些因素，已废弃 发送“绑定 &lt;playername&gt;”以添加白名单（若仍无法进入参考”疑难解答”）（解绑可发送“解绑”） 机器人账户经常被腾讯踢下线&amp;验证，这是我们没法预防的 下载客户端（集成相应mod，亦可自行使用1.19.3原版） 下载HMCL[点击下载] 安装1.19.3 + fabric 下载模组包 解压到游戏目录中mod文件夹 在群公告里获取IP并连接 附录 加入了互通（Geyser）支持，可以绑定be端游戏名后游玩 在线地图需要注册，打开网页后按照流程即可"},{"title":"API","path":"/wiki/Artalk-doc/API/index.html","content":"以下所以请求地址均为所搭建的后端地址 eg:https://xxx.com/index.php 还有一些后续补充（例如审核部分），后面会分类 在qwqcode完成规划api后重写 获取页面数据 请求方法:POST 参数名称 参数值 说明 action CommentGet 获取页面数据（必须） page_key page_key 页面唯一ID（必须） limit 请求获取评论数量 offset 请求在xx条评论之后的评论 JSON 回复根对象： 字段 类型 内容 备注 success str true&#x2F;false msg str 获取成功&#x2F;page_key 不能为空 data array 信息本体 data数组： 项 类型 内容 备注 comments obj 评论信息 offset num 请求获取评论数量 与请求保持一致 limit num 请求在xx条评论之后的评论 与请求保持一致 total_parents num 父级评论数量 total num 总评论数量（包括回复他人） admin_nicks obj 管理员昵称 admin_encrypted_emails obj 管理员邮箱（md5加密） page array 该页面评论信息 commentscomments：项类型内容备注idnum该评论唯一idcontentstr评论内容nickstr昵称linkstr链接page_keystrpage_keyridnum所回复评论的id（没有默认为0）uastr浏览器uadatestrYYYY-MD h:m:s时间is_collapsedstrtrue&#x2F;false是否折叠email_encryptedstr邮箱（md5加密）badgeobj“name”: “”, “color”: “”牌子is_adminstrtrue&#x2F;false是否为管理员 pagecomments：项类型内容备注idnum该页面唯一id(数字)page_keystr页面唯一IDis_close_commentstrtrue&#x2F;false是否禁用评论 回复评论 请求方法:POST 参数名称 参数值 说明 action CommentAdd 添加评论（必须） content 评论内容（必须） nick 昵称（必须） email 邮箱（必须） link 链接 rid 所回复评论的id（没有默认为0） page_key page_key（必须） password 管理员密码（仅以管理员身份回复时） captcha 验证码（仅触发验证时） JSON 回复根对象： 字段 类型 内容 备注 success str true&#x2F;false msg str 评论成功&#x2F;xxx不能为空&#x2F;需要验证码 data array 信息本体 data数组： 项 类型 内容 备注 id num 该评论唯一id content str 评论内容 nick str 昵称 link str 链接 page_key str page_key rid num 所回复评论的id（没有默认为0） ua str 浏览器ua date str YYYY-MD h:m:s 时间 is_collapsed str true&#x2F;false 是否折叠 email_encrypted str 邮箱（md5加密） badge obj “name”: “”, “color”: “” 牌子 is_admin str true&#x2F;false 是否为管理员（仅以管理员身份回复时） data数组(回复”需要验证码”时)： 项 类型 内容 备注 need_captcha str true img_data str data:image….. 关闭评论 请求方法:POST 参数名称 参数值 说明 action SetPage 页面设置（必须） nick 昵称（必须） email 邮箱 page_key 页面唯一ID password 管理员密码 is_close_comment 1&#x2F;0 页面状态，1&#x3D;&gt;关闭，2&#x3D;&gt;打开 JSON 回复根对象： 字段 类型 内容 备注 success str true&#x2F;false msg str 页面已更新~&#x2F;需要管理员身份 data array 页面信息 data数组： 项 类型 内容 备注 id num 该页面唯一id（数字） page_key str 该页面唯一id is_close_comment str true&#x2F;false 是否处于关闭状态 data数组(回复”需要管理员身份”时)： 项 类型 内容 备注 need_password str true&#x2F;false 通知中心 请求方法:POST 参数名称 参数值 说明 action CommentGetV2 获取通知（必须） nick 昵称（必须） email 邮箱（必须）（如果不填能获取成功但无数据返回） type mentions&#x2F;all&#x2F;mine&#x2F;pending 对应提及&#x2F;全部&#x2F;我的&#x2F;待审（必须） limit 999 默认为999 password 仅以管理员身份时 💢回复与获取页面数据一致 折叠评论 请求方法:POST 参数名称 参数值 说明 action CommentCollapse 评论设置（必须） id 所折叠评论ID nick 昵称（必须） email 邮箱 password 管理员密码 is_collapsed 1&#x2F;0 页面状态，1&#x3D;&gt;关闭，2&#x3D;&gt;打开 JSON 回复根对象： 字段 类型 内容 备注 success str true&#x2F;false msg str 评论已(取消)折叠&#x2F;需要管理员身份 data array 评论信息 data数组： 项 类型 内容 备注 id num 该评论唯一id（数字） is_collapsed str true&#x2F;false 是否处于折叠状态 data数组(回复”需要管理员身份”时)： 项 类型 内容 备注 need_password str true&#x2F;false 删除评论 请求方法:POST 参数名称 参数值 说明 action CommentDel 评论删除（必须） id 所删除评论ID nick 昵称（必须） email 邮箱 password 管理员密码 JSON 回复根对象： 字段 类型 内容 备注 success str true&#x2F;false msg str 评论已删除&#x2F;需要管理员身份 data array {“del_total”:1} 检查管理员身份（密码） 请求方法:POST 参数名称 参数值 说明 action AdminCheck 检查管理员密码（必须） nick 昵称（必须） email 邮箱（必须） password 管理员密码 JSON 回复1&#123;&quot;success&quot;:true,&quot;msg&quot;:&quot;密码正确&quot;,&quot;data&quot;:null&#125;"},{"title":"FAQ","path":"/wiki/Artalk-doc/QandA/index.html","content":"Q:使用Artalk时一直转圈无法加载 A:打开artalk.js，搜索5e3，5e3即5x10³，5000对应5s，把它改为6e4即60s Q:提交评论卡死 A:Issue #6 · ArtalkJS&#x2F;Artalk (github.com) 如果禁用pcntl_fork()函数会导致无法发信及评论完成页面不刷新 Q:CORS跨域问题？ A:检查配置文件中的博客名称中是否有‘，如果没有就检查下配置文件有没有哪里有问题，如果不是Artalk的问题就去百度 Q:”传送门“跳转到404 A:打开&#x2F;email-tpl&#x2F;default.html，在第6行前加上自己的博客链接 （内容待补充）"},{"title":"开发","path":"/wiki/Artalk-doc/develop/index.html","content":"!!! warning 注意本页面最后编辑时间为2021&#x2F;7&#x2F;21，在日后的版本中可能不再适用，请以仓库为准 自定义头像源官方仓库中是在配置中确定 不过我不想每个页面都多出这么一句话来拖慢速度（虽然微乎其微但可以减少冗余代码🙃） 打开artalk.js,搜索cdn 直接替换就好 自定义表情包 仓库里也有，这里作为补充 !!! warning 注意由于自定义会使原本引入代码长一大截，建议新建一个js再在需要的地方引入 在new Artalk(&#123;下打个回车， 粘贴emoticons: eData, 在new Artalk(&#123;上粘贴 123let eData = &#123; // ...&#125; 打开表情包配置格式参考，把第一个&#123;和最后一个&#125;中的文字复制到let eData &#x3D; { }中 然后就是自定义了，在复制后的倒数第二个}后加个,，在，后按回车，按以下格式进行 123456&quot;分类名称&quot;: &#123; &quot;inputType&quot;: &quot;image&quot;, //类型 &quot;container&quot;: &#123; &quot;表情名称&quot;: &quot;表情url/颜文字对应文字&quot;, &#125;&#125; 可以前往 emotion.xiaokang.me 复制现成的 !!! Warning “注意”在类型一项中，填写emoticon即”颜文字类“，点击插入对应文字填写image即”图片类“，点击插入对应图片表情url中有特殊符号时会无法显示（bug） ~~本站一部分表情用超星学习通作为图床，毕竟又快又不要钱😎~ 以上放屁，有防盗链,建议用去不图床,如果一定要用可以在&lt;head&gt;中加入&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt; 配置完像这样 自定义按钮文字没什么好说的，打开artalk.js搜索替换就好 按钮点击加载artalk目前没有懒加载表情，但我们可以通过网页加载好后让访客点击按钮再加载 找到原来放artalk.js的地方，替换为 12345678&lt;script&gt;function load()&#123; var script = document.createElement(&quot;script&quot;); script.type=&quot;text/javascript&quot;; script.src=&#x27;/js/artalkconfig.js&#x27;; //替换为自己的artalk.js链接 document.body.appendChild(script) &#125;&lt;/script&gt; 找个地方放 1&lt;a href=&quot;javascript:load();&quot;&gt;点击加载评论&lt;/a&gt; 自行美化[doge] 未压缩版本因为原版经过gzipped,导致源码可读性大大降低，这里提供一份未压缩的 蓝奏云"},{"title":"安装（PHP）","path":"/wiki/Artalk-doc/install/index.html","content":"!!! warning 注意本页面最后编辑时间为2021&#x2F;7&#x2F;21，在日后的版本中可能不再适用，请以仓库为准 补全依赖通过Goorm先登录 新建容器 仓库地址 完成后在代码框中依次输入 1.安装composer 2.安装php扩展库 3.安装依赖 4.下载到本地 压缩 12cd ../zip -q -r Artalk.zip /workspace/Artalk-API-PHP 注:&#x2F;workspace&#x2F;Artalk-API-PHP根据实际修改 再取得ssh连接地址，端口及私钥 然后用wincsp连接上，下载 wsl （如果出现如图问题执行sudo apt-get update) 最后去它的运行目录就可以找到了（上传记得压缩） Github 不与别的文章重复 部署因为Artalk用php作为后端，所以我们需要找个能运行php的虚拟主机 这里我用的是酷友的御文云 (i.rr.rw) 注册登录购买不必多说 新开通的像这样 点控制台：一键登录跳到文件管理，把原来有的文件删除 上传(完成后点下右上角的刷新) 解压后将文件移动到根目录 （可以删掉workspace和artalk.zip了&gt;_） 修改运行目录为/public 启用PHP 此时在基本功能-域名绑定里可以访问送的二级域名来看看了&gt;_&lt; what?!啊没错，你还要编辑配置文件 站点配置返回文件管理中编辑Config.example.php 配置 用户名和邮箱很重要~ 保存后重命名为Config.php 前端插入1234567891011121314151617&lt;div id=&quot;ArtalkComments&quot;&gt;&lt;/div&gt; &lt;!-- ... --&gt; &lt;script src=&quot;https://raw.hzchu.top/ArtalkJS/Artalk/master/dist/Artalk.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://raw.hzchu.top/ArtalkJS/Artalk/master/dist/Artalk.css&quot;&gt; &lt;script&gt; new Artalk(&#123; el: &#x27;#ArtalkComments&#x27;, // 元素选择 placeholder: &#x27;来啊，快活啊 ( ゜- ゜)&#x27;, // 占位符 noComment: &#x27;快来成为第一个评论的人吧~&#x27;, // 无评论时显示 pageKey: &#x27;[页面唯一标识]&#x27;, serverUrl: &#x27;https://artalk.hzchu.top/&#x27;, //改为刚刚送的二级域名 readMore: &#123; // 阅读更多配置 pageSize: 15, // 每次请求获取评论数 autoLoad: true // 滚动到底部自动加载 &#125; &#125;); &lt;/script&gt; like this"},{"title":"相关链接","path":"/wiki/Artalk-doc/more-url/index.html","content":"镜像源（头像） 极客族 loli cf Workers(自搭) 七牛 您也可以考虑使用Cravatar - 中国的公共头像服务 一些工具在线JSON校验格式化工具"},{"title":"使用","path":"/wiki/Artalk-doc/use/index.html","content":"管理 当评论区被人灌水时 在评论区的昵称中填入自己刚刚填的用户名和邮箱 在弹出的对话框内输入密码 ( •̀ ω •́ )✧ 设置邮箱提醒与前面有点重复(^_-) 这里用的是SMTP模式 以qq邮箱为例 登陆qq邮箱（网页版）–设置–账户–POP3&#x2F;IMAP&#x2F;SMTP&#x2F;Exchange&#x2F;CardDAV&#x2F;CalDAV服务 开启POP3&#x2F;SMTP服务,取得授权码 从帮助中心取得smtp服务器相关信息（其它大同小异） 填入配置文件 像这样 有消息来时 自动填写pagekey 第一种（推荐） 将pageKey:&#39; &#39;,改为pageKey: location.pathname, 发出去的请求像这样 ps:如果你的文章题目常常有大量中文可以考虑使用MD5&#x2F;时间戳&#x2F;decode(location.pathname) 第二种 将pageKey:&#39; &#39;,改为pageKey: window.location.href, 发出去的请求像这样 PS：因为pagekey有点长，所以可能会一直转圈圈（超过5秒没加载完），参考FAQ"},{"title":"关于","path":"/wiki/fcloud/about/index.html","content":"简单介绍这是一个纯生存的公益服，为了更多玩家游玩，我们关闭了正版验证。 采用fabric服务端，偏生电 加入了一些实用类插件，在不破坏原版体验下提高玩家体验。 详细版 宣传片 B站宣传片 人员构成 昵称 职务 thun888 腐竹 THEOSMANTHUSWINE 群管理 Yangyyx 群管理 规定（暂行）1.群内不得刷屏（实在有话讲请把短句变长段，不必挤牙膏）2.群内不得发送具有色情、挑衅、侮辱性的图片或文章2.不得在本群宣传其他服务器，不得打广告（谈论其他游戏请不要过度）3.不得在群里谩骂他人，吵架，请成员及各位管理控制好自己的情绪，以营造一个和谐的聊天环境。4.游戏时请不要制造高空流水、各种卡&#x2F;崩服机等会导致卡服、破坏游戏环境的行为5.游玩时请保持良好的素养，不要做熊孩子！！！6.我方提供的所有服务，未经同意禁止用于其他地方 关于封禁制度我服所禁止的行为包括但不限于： 使用暴力挂，矿透，及规定4内容，一经举报&#x2F;抽查发现，我们将按照以下规定处罚： 次数 处罚 1 给予警告并强制下线10分钟 2 封禁7天 3&gt;&#x3D; 永久封禁 以上规定视情节轻重增加或减轻处罚力度。 封禁玩家会在小黑屋、Q群和游戏内同步公布 关于绑定制度内测初期，由于没有使用白名单，我们遇到了2次外挂，2个矿透，还有一个伪装成我吹水的。可见，若不实行强力有效的管理制度，那就毫无游戏体验了。实行一QQ一游戏名绑定制度（白名单）后，至今没有外挂洗礼 ps：外挂视频还在群文档里👻 引用及版权声明游戏： 登录大厅：雪之樱 网页： 消息记录：Artalk 后端：​\t手搓 捐赠至2023-6-23为止，服务器运行已消耗电费100大洋。 不强求，只希望有人给杯可乐解渴 Alipay Wechat 鸣谢 昵称 金额 时间 THEOSMANTHUSWINE 15 23&#x2F;7&#x2F;28 Yangyyx 100 23&#x2F;7&#x2F;28"},{"title":"实用命令","path":"/wiki/fcloud/command/index.html","content":"Essential Commands传送相关 1.玩家间tp /tpa &lt;目标玩家&gt; ：请求传送到xxx玩家 /tpahere &lt;目标玩家&gt;：请求玩家传送到你这儿 /tpaccept &lt;目标玩家&gt;：接受传送请求 /tpdeny &lt;目标玩家&gt;：拒绝传送请求 2.与家相关（&#x2F;home) /home set &lt;名称&gt;：设置家 /home list：显示所有已保存位置的家 /home tp &lt;名称&gt;：传送至家（注：如果只设置了一个家，可以不写家的名称这个参数） /home delete &lt;名称&gt;：删除家 3.&#x2F;spawn类 与Carpet重复，暂不使用 /spawn set：设置传送点（只能设置一个） /spawn：传送至设置的传送点 4.传送 /back：返回传送前的位置（可用于传送回死亡位置） 其他 /fly 开关飞行模式 /workbench：打开工作台(类似于随身工作台) /enderchest：打开自己的未影箱 /wastebin 打开垃圾桶 HTM（箱子锁） 检查： /htm flag：运行命令后，敲击箱子检查容器是否公开 设置： /htm set PUBLIC：运行命令后，敲击选择把容器设为公开。 /htm set PRIVATE：运行命令后，敲击选择把容器设为私有，私有状态下只有你授权的玩家可以打开容器。 /htm set KEY：运行命令后，拿着任意物品敲击容器，其他人打开容器时需使用敲击时的物品作为钥匙才能打开容器。 信任和取消信任： /htm trust 玩家名 global：允许玩家打开你的容器。 /htm untrust 玩家名 global：取消玩家打开你容器的权限。 移除保护： /htm remove：移除该容器的保护。 转移权限： /htm transfer 玩家名：把敲击容器的保护权转移给其他玩家，转移后该容器就是别人的了，你将无法打开和破坏该容器。 持续模式： /htm persist：打开或关闭持续模式，打开后输入指令，即可一次敲击多个容器执行这个指令。 Dynmap 详细参阅命令 ·webbukkit&#x2F;dynmap Wiki (github.com) 隐藏和显示玩家 /dynmap hide：在地图上隐藏自己。 /dynmap show ：在地图上显示自己。 标记 /dmarker add &lt;labelname&gt; icon:&lt;icon&gt; set:&lt;set-id&gt;：在玩家的当前位置添加一个新标记，具有标签名字，（可选）图标，（可选）标记集参数 /dmarker update &lt;label&gt; icon:&lt;newicon&gt; newlabel:&lt;newlabel&gt;：更新与给定标签匹配的第一个标记的图标或标签 /dmarker delete &lt;labelname&gt;：删除标记 /dmarker listsets：列出所有标记 附录anchorbankbasketbedbeerbighouseblueflagbombbookshelfbricksbronzemedalbronzestarbuildingcakecameracartcautionchestchurchcoinscommentcompassconstructioncrosscupcutlerydefaultdiamonddogdoordowndrinkexclamationfactoryfireflowergeargoldmedalgoldstargreenflaghammerhearthousekeykingleftlightbulblighthouselockminecartofflineuserorangeflagpinpinkflagpirateflagpointdownpointleftpointrightpointupportalpurpleflagqueenredflagrightrubyscalesshieldsignsilvermedalsilverstarskullstarsuntempletheatertornadotowertreetruckupwalkwarningworldwrenchyellowflag Carpet生物检测 1.检测能否生成生物 1/spawn list &lt;pos&gt; 该命令将检测&lt;pos&gt;所指定的坐标是否能够生成生物，并在聊天栏中输出结果。每一行将显示生物类别、名称、刷怪权重、刷怪尝试次数、能否刷怪、空间是否足够、以及刷怪概率。 2.检查总生物量 1/spawn entities &lt;type&gt; 该命令会检查各类生物的数量以及它们是否达到刷怪上限。 未指定&lt;type&gt;时，将显示每个生物分类的刷怪上限以及已有生物数量。 指定&lt;type&gt;时，将显示该分类下所有占用刷怪上限的生物及其位置。若有权限，点击聊天栏中的坐标会把你传送到那个生物的位置。 &lt;type&gt;可以是ambient（环境生物，即蝙蝠）、axolotls（美西螈）、creature（动物）、misc（其他不占生物上限的生物）、monster（怪物）、underground_water_creature（洞穴水生生物）、water_ambient（水生环境生物，即鱼）、water_creature（水生动物，即海豚和鱿鱼）。 1/spawn mobcaps &lt;dimension&gt; 作用与&#x2F;spawn entities类似，但可以通过参数&lt;dimension&gt;指定要检查的维度。 速度控制 若不合理使用会被封禁 1/tick warp &lt;ticks&gt; &lt;tail comman&gt; 该命令可以让游戏在&lt;ticks&gt;游戏刻内以最高速度运行，实现跳转到一定时间后的效果。例如，&#x2F;tick warp 72000 可以让游戏快速运行到1小时之后。 可以在命令末尾添加&lt;tail command&gt;命令，这样carpet会在游戏快速运行结束后执行它。例如，&#x2F;tick warp 72000 say done 可以让游戏快速运行到1小时之后，随后执行命令&#x2F;say done。 在游戏加速运行时，不可以重复执行&#x2F;tick warp命令。但游戏加速运行时执行 &#x2F;tick warp 或 &#x2F;tick warp 0 可以停止加速，让游戏恢复正常速度。 1/tick freeze 暂停游戏 1/tick step &lt;ticks&gt; 在游戏暂停时执行此命令，可以使游戏正常运行&lt;ticks&gt;个游戏刻后再次暂停。在游戏正常运行时执行此命令没有效果。 1/tick superHot 该命令会让游戏在玩家移动时运行，在玩家静止时暂停。 1/tick rate &lt;rate&gt; 该指令会直接修改游戏的TPS（每秒游戏刻数），从而调整游戏的速度，默认的TPS为20。 资源监视 1/tick health &lt;ticks&gt; 该指令可以根据执行后一段时间内的游戏运行状况，汇总每游戏刻每个维度中各类东西平均占用的计算时长，包括网络、自动存档、游戏刻外任务、刷怪、区块加载、区块卸载、方块更新、实体运算、方块实体运算、村民与袭击、环境、其他这几项。 默认分析100个游戏刻（5秒）的游戏运行状况，也可以通过&lt;ticks&gt;参数自定义，但不得低于20。 1/tick entities &lt;ticks&gt; 该指令只会汇总执行后一段时间内的游戏内实体和方块实体的运算时长，并列出时长占用最高的10类实体。 默认分析100个游戏刻（5秒）的游戏运行状况，也可以通过&lt;ticks&gt;参数自定义，但不得低于20。 生成假玩家 参阅&#x2F;player - Carpet - MC百科 该页面引用MC百科 mod有很多命令 ，这里只整理对普通玩家有用的部分"},{"title":"数据安全","path":"/wiki/fcloud/datasafe/index.html","content":"我认为可以分为客户端和服务端两方面来阐述 First，对与玩家而言，可以接触到的无非3个方面：游戏，Q群，网站 在游戏内，我们使用Authme插件，保障玩家的账号安全，且密码均加密存储 Q群，机器人的一言一行均以QQ号作为唯一依据，他人（即便是管理员）无法代替您管理自己的账号 管理员不会主动索取您的隐私数据，请不要无意泄露 网站，管理部分与机器人挂钩，设置了严格的token机制。（尽管目前前端没上线） Second，对与服务端而言，数据安全不仅包括不被泄露，还有丢失。 在内部api调用流程中，也有复杂的控制方法，不展开叙述。 至于数据丢失，在一次硬件故障+人为失误中，我们丢失了部分关键存档数据和所有配置文件，一度暂停整个项目。目前我们使用syncthing实现数据实时同步，以及每月的onedrive的数据存档。实现了两地三中心的容灾架构，数据安全得很 好，吹完水了"},{"title":"疑难解答","path":"/wiki/fcloud/faq/index.html","content":"有更多疑问，欢迎反馈 1.无法连接到服务器 ​\teg:未知的主机，连接重置等 ​\tA：由于动态公网的问题，且在连接量过大时可能会被强行下线并更换IP，一般情况下需要5~7min。您可以关注服务器状态。当然，也有可能是服务器出问题，比如6&#x2F;17号散热风扇故障导致过热停机。 2.在绑定成功后仍显示无白名单（You are not white-listed on this server!） ​\tA：问题在于你的id存在对应的正版用户，或你的正版账号登录出现问题，以离线的方式进入服务器，两者的UUID不相同。 例如在访问http://tools.glowingmines.eu/convertor/nick/lrx时，返回了 1&#123;&quot;nick&quot;:&quot;Lrx&quot;,&quot;uuid&quot;:&quot;b67b9cdfba2740869f53150b96f01a33&quot;,&quot;splitteduuid&quot;:&quot;b67b9cdf-ba27-4086-9f53-150b96f01a33&quot;,&quot;offlineuuid&quot;:&quot;bf2bd774012d3c30a1de15b487ce700e&quot;,&quot;offlinesplitteduuid&quot;:&quot;bf2bd774-012d-3c30-a1de-15b487ce700e&quot;,&quot;haspaid&quot;:&quot;true&quot;&#125; 可以看到同时存在uuid和offlineuuid，默认情况下，白名单会优先使用正版的uuid，从而无法进入游戏。 在群内发送“离线账号修复”可解决 已更改白名单逻辑"},{"title":"插件介绍","path":"/wiki/fcloud/mods/index.html","content":"本篇为实用命令的扩展 以图片为主 内部插件死亡日志 需搭配客户端mod Image2map视频： var player = new DogePlayer({ container: document.getElementById('player_1f1693bd319289ed'), userId: 4322, vcode: '1f1693bd319289ed', autoPlay: false, vtype: 10 }); 链接：上传の地方 128*128对应一张地图 请勿使用该服务传播违法消息！ ShowMeWhatYouGot 显示详情需搭配客户端mod 语音交流参阅[SVC]简单的语音聊天 (Simple Voice Chat) - MC百科|最大的Minecraft中文MOD百科 (mcmod.cn) 外部插件（MCDR）Beep格式：@ playername Bot假人管理 QBM备份 管理员可使用 DayCountNBT QBOT在Q群中，您可以通过发送关键词来触发机器人 绑定用于添加白名单 语法：绑定 &lt;playername&gt; 解绑用于取消白名单 离线账号修复顾名思义，用于修复无白名单错误 正常流程绑定用离线账号修复的逻辑替代了绑定，如果出现问题可以试试原版的 ！！上传图片并不需要关键词，只需要@Bot并带上图片即可，将上传到峰间云海|相册 be绑定 同绑定 与be解绑同为管理be端白名单的命令 需在绑定前进行 be解绑 同解绑"}]